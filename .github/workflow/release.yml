name: svf-python-build

on:
  push:
    branches:
      - main  # 只有 merge 到 main 才触发

env:
  SVF_CTIR: 1
  SVF_Z3: 1
  SVF_DIR: $GITHUB_WORKSPACE/SVF
  LLVM_DIR: $GITHUB_WORKSPACE/SVF/llvm-16.0.0.obj
  Z3_DIR: $GITHUB_WORKSPACE/SVF/z3.obj

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # macOS Xcode 配置
      - name: mac-setup
        if: runner.os == 'macOS'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.3.0'

      - name: mac-setup-workaround
        if: runner.os == 'macOS'
        run: |
          ln -sfn /Applications/Xcode_15.3.0.app /Applications/Xcode.app

      # 安装 Linux 依赖
      - name: ubuntu-setup
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y \
              cmake gcc g++ nodejs doxygen graphviz lcov libncurses5-dev libtinfo6 libzstd-dev \
              python3 python3-pip python3-venv

      # 计算 VERSION 版本号
      - name: Set VERSION
        run: |
          VERSION="0.0.0-dev$(date +'%Y%m%d%H%M%S')"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # 下载 & 编译 SVF
      - name: Clone and Build SVF
        run: |
          git clone https://github.com/SVF-tools/SVF.git
          cd SVF
          bash build.sh shared
          echo "SVF_DIR=$GITHUB_WORKSPACE/SVF" >> $GITHUB_ENV
          echo "LLVM_DIR=$GITHUB_WORKSPACE/SVF/llvm-16.0.0.obj" >> $GITHUB_ENV
          echo "Z3_DIR=$GITHUB_WORKSPACE/SVF/z3.obj" >> $GITHUB_ENV
          ls -lh $GITHUB_WORKSPACE/SVF/Release-build/lib

      # 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine pybind11

      # 下载 & 编译 SVF-Python
      - name: Clone and Build SVF-Python
        run: |
          git clone https://github.com/SVF-tools/SVF-Python.git
          cd SVF-Python
          rm -rf build dist pysvf.egg-info  # 清理旧构建
          export PYBIND11_DIR=$(python3 -m pybind11 --cmakedir)
          export CMAKE_BUILD_TYPE=Release
          SVF_DIR=${SVF_DIR} LLVM_DIR=${LLVM_DIR} Z3_DIR=${Z3_DIR} PYBIND11_DIR=${PYBIND11_DIR} python3 setup.py bdist_wheel
          ls -lh dist/

      # 上传 wheel 作为 artifact
      - name: Upload Python wheels
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels
          path: SVF-Python/dist/

  publish:
    needs: build
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write  # 允许 OIDC 认证

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          name: python-wheels
          path: dist/

      # 使用 TestPyPI API Token 进行身份认证
      - name: Publish to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          pip install twine
          twine upload --repository testpypi dist/*
