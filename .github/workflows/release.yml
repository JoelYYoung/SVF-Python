name: svf-python-build

on:
  push:
    branches:
      - main  # only build on main branch

jobs:
  build:
    runs-on: ${{ matrix.os }}
    outputs:
      version: ${{ steps.set_version.outputs.version }}
      artifacts: ${{ join(steps.collect_artifacts.outputs.artifacts, ',') }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14, ubuntu-24.04-arm]
        python-version: ["3.10"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # macOS Xcode
      - name: mac-setup
        if: runner.os == 'macOS'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.3.0'

      - name: mac-setup-workaround
        if: runner.os == 'macOS'
        run: |
          ln -sfn /Applications/Xcode_15.3.0.app /Applications/Xcode.app

      # install linux dependencies
      - name: ubuntu-setup
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y \
              cmake gcc g++ nodejs doxygen graphviz lcov libncurses5-dev libtinfo6 libzstd-dev \
              python3 python3-pip python3-venv

      # calculate version
      - name: Set VERSION
        id: set_version
        run: |
          VERSION="0.0.0-dev$(expr ${{ github.run_id }} % 1000000)"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install svf-lib and set environment variables
        run: |
          npm install svf-lib
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            if [[ "$(uname -m)" == "x86_64" ]]; then
              echo "SVF_DIR=$PWD/node_modules/svf-lib/SVF-linux-x86_64" >> $GITHUB_ENV
            elif [[ "$(uname -m)" == "aarch64" ]]; then
                echo "SVF_DIR=$PWD/node_modules/svf-lib/SVF-linux-aarch64" >> $GITHUB_ENV
            fi
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "SVF_DIR=$PWD/node_modules/svf-lib/SVF-osx" >> $GITHUB_ENV
          fi
          echo "LLVM_DIR=$PWD/node_modules/llvm-16.0.0.obj" >> $GITHUB_ENV
          echo "Z3_DIR=$PWD/node_modules/z3.obj" >> $GITHUB_ENV

      - name: Verify environment variables
        run: |
          echo "SVF_DIR=$SVF_DIR"
          echo "LLVM_DIR=$LLVM_DIR"
          echo "Z3_DIR=$Z3_DIR"

        # set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine pybind11

      - name: Get system architecture
        id: get_arch
        run: |
          ARCH=$(uname -m)
          echo "ARCH=$ARCH" >> $GITHUB_ENV
          echo "arch=$ARCH" >> $GITHUB_OUTPUT

      # clone & build SVF-Python
      - name: Clone and Build SVF-Python
        run: |
          git clone https://github.com/SVF-tools/SVF-Python.git
          cd SVF-Python
          rm -rf build dist pysvf.egg-info  
          export PYBIND11_DIR=$(python3 -m pybind11 --cmakedir)
          export CMAKE_BUILD_TYPE=Release
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            SVF_DIR=${SVF_DIR} LLVM_DIR=${LLVM_DIR} Z3_DIR=${Z3_DIR} PYBIND11_DIR=${PYBIND11_DIR} python3 setup.py bdist_wheel --plat-name manylinux2014_${{ steps.get_arch.outputs.arch }}
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            SVF_DIR=${SVF_DIR} LLVM_DIR=${LLVM_DIR} Z3_DIR=${Z3_DIR} PYBIND11_DIR=${PYBIND11_DIR} python3 setup.py bdist_wheel --plat-name macosx-11.0-arm64
          fi
          ls -lh dist/

      # upload Python wheels
      - name: Upload Python wheels
        uses: actions/upload-artifact@v4
        with:
          #version -os - arch(x86_64 or aarch64) - python-version
          name: python-wheels-${{ steps.set_version.outputs.version }}-${{ runner.os }}-${{ steps.get_arch.outputs.arch }}-py${{ matrix.python-version }}
          path: SVF-Python/dist/

  publish:
    needs: build
    runs-on: ubuntu-24.04
    permissions:
      contents: write
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
  
      - name: Set VERSION from build job
        run: |
          echo "VERSION=${{ needs.build.outputs.version }}" >> $GITHUB_ENV
  
      - name: Extract correct release ID
        run: echo "RELEASE_ID=$(gh release view "$VERSION" --json id -q .id)" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Ensure release exists
        run: gh release create "$VERSION" --title "$VERSION" --notes "Auto-created release" || echo "Release already exists"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Delete old release assets
        run: |
          ASSETS=$(gh release view "$VERSION" --json assets -q '.assets[].name')
          for ASSET in $ASSETS; do
            echo "Deleting asset: $ASSET"
            gh release delete-asset "$VERSION" "$ASSET" --yes
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Download all artifacts
        run: |
          mkdir -p dist/
          gh run download --dir dist/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Upload only matching VERSION artifacts
        run: |
          for file in dist/*; do
            if [[ "$file" == *"${VERSION}"* ]]; then
              echo "Uploading: $file"
              gh release upload "$VERSION" "$file"
            else
              echo "Skipping: $file (does not match VERSION)"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
