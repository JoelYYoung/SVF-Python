name: svf-python-build

on:
  workflow_dispatch:
    inputs:
      triggered_by:
        description: 'Repository that triggered this workflow'
        required: false
        default: 'manual'
  push:
    branches:
      - main  # only build on main branch

jobs:
  stubtest:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9']

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt-get update
        sudo apt-get install -y \
            cmake gcc g++ nodejs doxygen graphviz lcov libncurses5-dev libtinfo6 libzstd-dev \
            python3 python3-pip python3-venv patchelf

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install svf-lib and set environment variables
      run: |
        npm install svf-lib
        echo "SVF_DIR=$PWD/node_modules/svf-lib/SVF-linux-x86_64" >> $GITHUB_ENV
        echo "LLVM_DIR=$PWD/node_modules/llvm-16.0.0.obj" >> $GITHUB_ENV
        echo "Z3_DIR=$PWD/node_modules/z3.obj" >> $GITHUB_ENV

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools mypy typing-extensions pybind11

    - name: Get system architecture
      id: get_arch
      run: |
        ARCH=$(uname -m)
        echo "ARCH=$ARCH" >> $GITHUB_ENV
        echo "arch=$ARCH" >> $GITHUB_OUTPUT

    - name: Clone and Build SVF-Python for stubtest
      run: |
        git clone https://github.com/SVF-tools/SVF-Python.git
        cd SVF-Python
        rm -rf build dist pysvf.egg-info  
        export PYBIND11_DIR=$(python3 -m pybind11 --cmakedir)
        export CMAKE_BUILD_TYPE=Release
        # Dummy version, no need to update VERSION file
        sed -i.bak "s/version=.*,/version='0.0.0.dev0',/" setup.py
        SVF_DIR=${SVF_DIR} LLVM_DIR=${LLVM_DIR} Z3_DIR=${Z3_DIR} PYBIND11_DIR=${PYBIND11_DIR} \
        python3 -m build --wheel
        # Install wheel
        pip install dist/*.whl

    - name: Run stubtest
      run: |
        cd SVF-Python
        MYPYPATH=./pysvf stubtest pysvf --allowlist ../stubtest_allowlist.txt

  build:
    needs: stubtest
    runs-on: ${{ matrix.os }}
    outputs:
      version: ${{ steps.read_version.outputs.version }}
      artifacts: ${{ join(steps.collect_artifacts.outputs.artifacts, ',') }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14, ubuntu-24.04-arm]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # macOS Xcode
      - name: mac-setup
        if: runner.os == 'macOS'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.3.0'

      - name: mac-setup-workaround
        if: runner.os == 'macOS'
        run: |
          ln -sfn /Applications/Xcode_15.3.0.app /Applications/Xcode.app

      # install linux dependencies
      - name: ubuntu-setup
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y \
              cmake gcc g++ nodejs doxygen graphviz lcov libncurses5-dev libtinfo6 libzstd-dev \
              python3 python3-pip python3-venv patchelf

      # calculate version
      - name: Read version
        id: read_version
        run: |
          CURRENT_VERSION=$(grep 'CURRENT_VERSION' VERSION | cut -d':' -f2 | tr -d '[:space:]')
          NEXT_VERSION=$(grep 'NEXT_VERSION' VERSION | cut -d':' -f2 | tr -d '[:space:]')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$NEXT_VERSION"
          # Debug output
          echo "----------------------------------------"
          echo "Current Version: $CURRENT_VERSION"
          echo "Next Version: $NEXT_VERSION"
          echo "----------------------------------------"


      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install svf-lib and set environment variables
        run: |
          npm install svf-lib
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            if [[ "$(uname -m)" == "x86_64" ]]; then
              echo "SVF_DIR=$PWD/node_modules/svf-lib/SVF-linux-x86_64" >> $GITHUB_ENV
            elif [[ "$(uname -m)" == "aarch64" ]]; then
                echo "SVF_DIR=$PWD/node_modules/svf-lib/SVF-linux-aarch64" >> $GITHUB_ENV
            fi
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "SVF_DIR=$PWD/node_modules/svf-lib/SVF-osx" >> $GITHUB_ENV
          fi
          echo "LLVM_DIR=$PWD/node_modules/llvm-16.0.0.obj" >> $GITHUB_ENV
          echo "Z3_DIR=$PWD/node_modules/z3.obj" >> $GITHUB_ENV

      - name: Verify environment variables
        run: |
          echo "SVF_DIR=$SVF_DIR"
          echo "LLVM_DIR=$LLVM_DIR"
          echo "Z3_DIR=$Z3_DIR"

      # set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine pybind11 auditwheel setuptools

      - name: Get system architecture
        id: get_arch
        run: |
          ARCH=$(uname -m)
          echo "ARCH=$ARCH" >> $GITHUB_ENV
          echo "arch=$ARCH" >> $GITHUB_OUTPUT

      # clone & build SVF-Python
      - name: Clone and Build SVF-Python
        run: |
          git clone https://github.com/SVF-tools/SVF-Python.git
          cd SVF-Python

        
          rm -rf build dist wheelhouse pysvf.egg-info  

          export PYBIND11_DIR=$(python3 -m pybind11 --cmakedir)
          export CMAKE_BUILD_TYPE=Release

          echo "Building with version: $NEXT_VERSION"

          sed -i.bak "s/version=.*,/version='${NEXT_VERSION}',/" setup.py

          SVF_DIR=${SVF_DIR} LLVM_DIR=${LLVM_DIR} Z3_DIR=${Z3_DIR} PYBIND11_DIR=${PYBIND11_DIR} \
            python3 -m build --wheel

          # if linux
          if [[ "$(uname)" == "Linux" ]]; then
            auditwheel repair dist/*.whl -w wheelhouse/
            echo "Fixed wheel files:"
            ls -lh wheelhouse/

            #move wheelhouse back to dist
            rm -rf dist/*
            mv wheelhouse/* dist/
          fi
          echo "Build completed. Repaired wheel files contain version $NEXT_VERSION"

      # Upload to TestPyPI
      - name: Publish to TestPyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          cd SVF-Python
          pip install twine
          twine upload --repository testpypi dist/* --verbose

      # upload Python wheels (for GitHub release)
      - name: Upload Python wheels
        uses: actions/upload-artifact@v4
        with:
          name: python-wheels-${{ steps.read_version.outputs.version }}-${{ runner.os }}-${{ steps.get_arch.outputs.arch }}-py${{ matrix.python-version }}
          path: SVF-Python/dist/

  update-version:
    needs: build  # This ensures all builds are complete
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update VERSION file
        run: |
          # Read current versions
          CURRENT_VERSION=$(grep 'CURRENT_VERSION' VERSION | cut -d':' -f2 | tr -d '[:space:]')
          NEXT_VERSION=$(grep 'NEXT_VERSION' VERSION | cut -d':' -f2 | tr -d '[:space:]')
          
          # Calculate new next version (increment last digit)
          NEW_NEXT_VERSION=$(echo $NEXT_VERSION | awk -F. '{$NF=$NF+1}1' OFS=.)
          
          # Update VERSION file
          echo "CURRENT_VERSION:$NEXT_VERSION" > VERSION
          echo "NEXT_VERSION:$NEW_NEXT_VERSION" >> VERSION
          
          # Commit and push changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION
          git commit -m "Update VERSION file after successful release $NEXT_VERSION"
          git push
