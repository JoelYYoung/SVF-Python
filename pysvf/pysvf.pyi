

from typing import List

class ICFGNode:
    def to_string(self) -> str: ...
    """Get the string representation of the ICFG node"""

    def get_id(self) -> int: ...
    """Get the id of the ICFG node"""

    def get_fun(self) -> "SVFFunction": ...
    """Get the function that the ICFG node belongs to"""

    def get_bb(self) -> "SVFBasicBlock": ...
    """Get the basic block that the ICFG node belongs to"""

    def get_svf_stmts(self) -> List["SVFStmt"]: ...
    """Get the SVF statements associated with the ICFG node"""

    def as_fun_entry(self) -> "FunEntryICFGNode": ...
    """Downcast to FunEntryICFGNode"""

    def as_fun_exit(self) -> "FunExitICFGNode": ...
    """Downcast to FunExitICFGNode"""

    def as_call(self) -> "CallICFGNode": ...
    """Downcast to CallICFGNode"""


    def as_ret(self) -> "RetICFGNode": ...
    """Downcast to RetICFGNode"""

    def is_fun_entry(self) -> bool: ...
    """Check if the ICFG node is a function entry node"""

    def is_fun_exit(self) -> bool: ...
    """Check if the ICFG node is a function exit node"""

    def is_call(self) -> bool: ...
    """Check if the ICFG node is a function call node"""

    def is_ret(self) -> bool: ...
    """Check if the ICFG node is a function return node"""

    def get_out_edges(self) -> List["ICFGEdge"]: ...
    """Get the out edges of the ICFG node"""

    def get_in_edges(self) -> List["ICFGEdge"]: ...
    """Get the in edges of the ICFG node"""

class FunEntryICFGNode(ICFGNode):
    def get_formal_parms(self) -> List["SVFVar"]: ...
    """Get the formal parameters of the function"""

    def add_formal_parm(self, parm: "SVFVar") -> None: ...
    """Add a formal parameter to the function"""

class FunExitICFGNode(ICFGNode):
    def get_formal_ret(self) -> "SVFVar": ...
    """Get the formal return value of the function"""

    def add_formal_ret(self, ret: "SVFVar") -> None: ...
    """Add a formal return value to the function"""

class CallICFGNode(ICFGNode):
    def get_caller(self) -> "FunEntryICFGNode": ...
    """Get the caller function"""

    def get_called_function(self) -> "SVFFunction": ...
    """Get the called function"""

    def get_actual_parms(self) -> List["SVFVar"]: ...
    """Get the actual parameters of the call"""

    def add_actual_parm(self, parm: "SVFVar") -> None: ...
    """Add an actual parameter to the call"""

    def is_vararg(self) -> bool: ...
    """Check if the call is a vararg call"""

    def is_virtual_call(self) -> bool: ...
    """Check if the call is a virtual call"""

class RetICFGNode(ICFGNode):
    def get_actual_ret(self) -> "SVFVar": ...
    """Get the actual return value"""

    def add_actual_ret(self, ret: "SVFVar") -> None: ...
    """Add an actual return value"""

class ICFGEdge:
    def to_string(self) -> str: ...
    """Get the string representation of the ICFG edge"""

    def is_cfg_edge(self) -> bool: ...
    """Check if the edge is a CFG edge"""

    def is_call_cfg_edge(self) -> bool: ...
    """Check if the edge is a call CFG edge"""

    def is_ret_cfg_edge(self) -> bool: ...
    """Check if the edge is a return CFG edge"""

    def is_intra_cfg_edge(self) -> bool: ...
    """Check if the edge is an intra CFG edge"""

    def get_src(self) -> ICFGNode: ...
    """Get the source node of the edge"""

    def get_dst(self) -> ICFGNode: ...
    """Get the destination node of the edge"""

    def as_intra_cfg_edge(self) -> "IntraCFGEdge": ...
    """Downcast to IntraCFGEdge"""

    def as_call_cfg_edge(self) -> "CallCFGEdge": ...
    """Downcast to CallCFGEdge"""

    def as_ret_cfg_edge(self) -> "RetCFGEdge": ...
    """Downcast to RetCFGEdge"""



class IntraCFGEdge(ICFGEdge):
    def get_condition(self) -> "SVFStmt": ...
    """Get the condition of the edge"""

    def get_successor_cond_value(self) -> "SVFValue": ...
    """Get the successor condition value"""

class CallCFGEdge(ICFGEdge):
    def get_call_site(self) -> "CallICFGNode": ...
    """Get the call site"""

    def get_call_pes(self) -> List["CallPE"]: ...
    """Get the call PEs"""

class RetCFGEdge(ICFGEdge):
    def get_call_site(self) -> "CallICFGNode": ...
    """Get the call site"""

    def get_ret_pe(self) -> "RetPE": ...
    """Get the return PE"""


class SVFStmt:
    def to_string(self) -> str: ...
    """Get the string representation of the SVF statement"""

    def get_edge_id(self) -> int: ...
    """Get the ID of the SVF statement"""

    def get_icfg_node(self) -> ICFGNode: ...
    """Get the ICFG node that the SVF statement belongs to"""

    def get_value(self) -> "SVFValue": ...
    """Get the value of the SVF statement"""

    def get_bb(self) -> "SVFBasicBlock": ...
    """Get the basic block that the SVF statement belongs to"""

    def is_addr_stmt(self) -> bool: ...
    """Check if the SVF statement is an address statement"""

    def is_copy_stmt(self) -> bool: ...
    """Check if the SVF statement is a copy statement"""

    def is_store_stmt(self) -> bool: ...
    """Check if the SVF statement is a store statement"""

    def is_load_stmt(self) -> bool: ...
    """Check if the SVF statement is a load statement"""

    def is_call_pe(self) -> bool: ...
    """Check if the SVF statement is a call PE"""

    def is_ret_pe(self) -> bool: ...
    """Check if the SVF statement is a return PE"""

    def is_gep_stmt(self) -> bool: ...
    """Check if the SVF statement is a GEP statement"""

    def is_phi_stmt(self) -> bool: ...
    """Check if the SVF statement is a phi statement"""

    def is_select_stmt(self) -> bool: ...
    """Check if the SVF statement is a select statement"""

    def is_cmp_stmt(self) -> bool: ...
    """Check if the SVF statement is a compare statement"""

    def is_binary_op_stmt(self) -> bool: ...
    """Check if the SVF statement is a binary operation statement"""

    def is_unary_op_stmt(self) -> bool: ...
    """Check if the SVF statement is a unary operation statement"""

    def is_branch_stmt(self) -> bool: ...
    """Check if the SVF statement is a branch statement"""

    def as_addr_stmt(self) -> "AddrStmt": ...
    """Downcast the SVF statement to an address statement"""

    def as_copy_stmt(self) -> "CopyStmt": ...
    """Downcast the SVF statement to a copy statement"""

    def as_store_stmt(self) -> "StoreStmt": ...
    """Downcast the SVF statement to a store statement"""

    def as_load_stmt(self) -> "LoadStmt": ...
    """Downcast the SVF statement to a load statement"""

    def as_call_pe(self) -> "CallPE": ...
    """Downcast the SVF statement to a call PE"""

    def as_ret_pe(self) -> "RetPE": ...
    """Downcast the SVF statement to a return PE"""


    def as_gep_stmt(self) -> "GepStmt":
        """Downcast the SVF statement to a GEP statement"""

    def as_phi_stmt(self) -> "PhiStmt": ...
    """Downcast the SVF statement to a phi statement"""

    def as_select_stmt(self) -> "SelectStmt": ...
    """Downcast the SVF statement to a select statement"""

    def as_cmp_stmt(self) -> "CmpStmt": ...
    """Downcast the SVF statement to a compare statement"""

    def as_binary_op_stmt(self) -> "BinaryOPStmt": ...
    """Downcast the SVF statement to a binary operation statement"""

    def as_unary_op_stmt(self) -> "UnaryOPStmt": ...
    """Downcast the SVF statement to a unary operation statement"""

    def as_branch_stmt(self) -> "BranchStmt": ...
    """Downcast the SVF statement to a branch statement"""

class AddrStmt(SVFStmt):
    def get_lhs_var(self) -> "SVFVar": ...
    """Get the LHS variable of the address statement"""

    def get_lhs_id(self) -> int: ...
    """Get the ID of the LHS variable of the address statement"""

    def get_rhs_var(self) -> "SVFVar": ...
    """Get the RHS variable of the address statement"""

    def get_rhs_id(self) -> int: ...
    """Get the ID of the RHS variable of the address statement"""

    def get_arr_size(self) -> "SVFValue": ...
    """Get the array size of the address statement"""

class CopyStmt(SVFStmt):
    def get_lhs_var(self) -> "SVFVar": ...
    """Get the LHS variable of the copy statement"""

    def get_lhs_id(self) -> int: ...
    """Get the ID of the LHS variable of the copy statement"""

    def get_rhs_var(self) -> "SVFVar": ...
    """Get the RHS variable of the copy statement"""

    def get_rhs_id(self) -> int: ...
    """Get the ID of the RHS variable of the copy statement"""

class StoreStmt(SVFStmt):
    def get_lhs_var(self) -> "SVFVar": ...
    """Get the LHS variable of the store statement"""

    def get_lhs_id(self) -> int: ...
    """Get the ID of the LHS variable of the store statement"""

    def get_rhs_var(self) -> "SVFVar": ...
    """Get the RHS variable of the store statement"""

    def get_rhs_id(self) -> int: ...
    """Get the ID of the RHS variable of the store statement"""

class LoadStmt(SVFStmt):
    def get_lhs_var(self) -> "SVFVar": ...
    """Get the LHS variable of the load statement"""

    def get_lhs_id(self) -> int: ...
    """Get the ID of the LHS variable of the load statement"""

    def get_rhs_var(self) -> "SVFVar": ...
    """Get the RHS variable of the load statement"""

    def get_rhs_id(self) -> int: ...
    """Get the ID of the RHS variable of the load statement"""

class CallPE(SVFStmt):
    def get_callsite(self) -> "CallICFGNode": ...
    """Get the call site"""

    def get_lhs_var(self) -> "SVFVar": ...
    """Get the LHS variable of the call PE"""

    def get_lhs_id(self) -> int: ...
    """Get the ID of the LHS variable of the call PE"""

    def get_rhs_var(self) -> "SVFVar": ...
    """Get the RHS variable of the call PE"""

    def get_rhs_id(self) -> int: ...
    """Get the ID of the RHS variable of the call PE"""

    def get_fun_entry_icfg_node(self) -> "FunEntryICFGNode": ...
    """Get the function entry ICFG node"""

class RetPE(SVFStmt):
    def get_callsite(self) -> "CallICFGNode": ...
    """Get the call site"""

    def get_lhs_var(self) -> "SVFVar": ...
    """Get the LHS variable of the return PE"""

    def get_lhs_id(self) -> int: ...
    """Get the ID of the LHS variable of the return PE"""

    def get_rhs_var(self) -> "SVFVar": ...
    """Get the RHS variable of the return PE"""

    def get_rhs_id(self) -> int: ...
    """Get the ID of the RHS variable of the return PE"""

    def get_fun_exit_icfg_node(self) -> "FunExitICFGNode": ...
    """Get the function exit ICFG node"""

class GepStmt(SVFStmt):
    def get_lhs_var(self) -> "SVFVar": ...
    """Get the LHS variable of the GEP statement"""

    def get_lhs_id(self) -> int: ...
    """Get the ID of the LHS variable of the GEP statement"""

    def get_rhs_var(self) -> "SVFVar": ...
    """Get the RHS variable of the GEP statement"""

    def get_rhs_id(self) -> int: ...
    """Get the ID of the RHS variable of the GEP statement"""

    def is_constant_offset(self) -> bool: ...
    """Check if the GEP statement has a constant offset"""

    def accumulate_constant_offset(self) -> int: ...
    """Get the constant offset"""

    def accumulate_constant_byte_offset(self) -> int: ...
    """Get the constant byte offset"""

    def get_constant_struct_fld_idx(self) -> int: ...
    """Get the constant struct field index"""

    def get_offset_var_and_gep_type_pair_vec(self) -> List["OffsetVarAndGepTypePair"]: ...
    """Get the offset variable and GEP type pair vector"""

class PhiStmt(SVFStmt):
    def get_res(self) -> "SVFVar": ...
    """Get the result variable"""

    def get_res_id(self) -> int: ...
    """Get the ID of the result variable"""

    def get_op_var(self, idx: int) -> "SVFVar": ...
    """Get the operand variable"""

class CmpStmt(SVFStmt):
    def get_predicate(self) -> int: ...
    """Get the predicate"""

    def get_res(self) -> "SVFVar": ...
    """Get the result variable"""

    def get_res_id(self) -> int: ...
    """Get the ID of the result variable"""

    def get_op_var(self, ID: int) -> "SVFVar": ...
    """Get the operand variable"""

class BinaryOPStmt(SVFStmt):
    def get_opcode(self) -> int: ...
    """Get the opcode"""

    def get_res(self) -> "SVFVar": ...
    """Get the result variable"""

    def get_res_id(self) -> int: ...
    """Get the ID of the result variable"""

    def get_op_var(self, ID: int) -> "SVFVar": ...
    """Get the operand variable"""

class UnaryOPStmt(SVFStmt):
    def get_opcode(self) -> int: ...
    """Get the opcode"""

    def get_res(self) -> "SVFVar": ...
    """Get the result variable"""

    def get_res_id(self) -> int: ...
    """Get the ID of the result variable"""

    def get_op_var(self) -> "SVFVar": ...
    """Get the operand variable"""

class BranchStmt(SVFStmt):
    def get_successors(self) -> List["ICFGNode"]: ...
    """Get the successors"""

    def get_num_successors(self) -> int: ...
    """Get the number of successors"""

    def is_conditional(self) -> bool: ...
    """Check if the branch statement is conditional"""

    def is_unconditional(self) -> bool: ...
    """Check if the branch statement is unconditional"""

    def get_condition(self) -> "SVFStmt": ...
    """Get the condition"""

    def get_branch_inst(self) -> "BranchInst": ...
    """Get the branch instruction"""


class ICFG:
    def get_nodes(self) -> List[ICFGNode]: ...
    """Get the nodes of the ICFG"""

    def get_gnode(self, id: int) -> ICFGNode: ...
    """Get the ICFG node with the given ID"""

    def get_global_icfg_node(self) -> ICFGNode: ...
    """Get the global ICFG node"""

    def dump(self, file: str) -> None: ...
    """Dump the ICFG to a file"""

class SVFVar:
    def get_name(self) -> str: ...
    """Get the name of the SVF variable"""

    def get_id(self) -> int: ...
    """Get the ID of the SVF variable"""

    def is_pointer(self) -> bool: ...
    """Check if the SVF variable is a pointer"""

    def is_const_data_or_agg_data_but_not_null_ptr(self) -> bool: ...
    """Check if the SVF variable is const data or agg data but not a null pointer"""

    def is_isolated_node(self) -> bool: ...
    """Check if the SVF variable is an isolated node"""

    def get_value_name(self) -> str: ...
    """Get the value name of the SVF variable"""

    def get_function(self) -> "SVFFunction": ...
    """Get the function that the SVF variable belongs to"""

    def ptr_in_uncalled_function(self) -> bool: ...
    """Check if the pointer is in an uncalled function"""

    def is_const_data_or_agg_data(self) -> bool: ...
    """Check if the SVF variable is const data or agg data"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF variable"""

    def is_val_var(self) -> bool: ...
    """Check if the SVF variable is a ValVar"""
    def is_obj_var(self) -> bool: ...
    """Check if the SVF variable is an ObjVar"""
    def is_gep_val_var(self) -> bool: ...
    """Check if the SVF variable is a GepValVar"""
    def is_gep_obj_var(self) -> bool: ...
    """Check if the SVF variable is a GepObjVar"""
    def is_fun_obj_var(self) -> bool: ...
    """Check if the SVF variable is a FunObjVar"""
    def is_fun_val_var(self) -> bool: ...
    """Check if the SVF variable is a FunValVar"""
    def is_arg_val_var(self) -> bool: ...
    """Check if the SVF variable is an ArgValVar"""
    def is_ret_val_var(self) -> bool: ...
    """Check if the SVF variable is a RetValPN"""
    def is_dummy_val_var(self) -> bool: ...
    """Check if the SVF variable is a DummyValVar"""
    def is_dummy_obj_var(self) -> bool: ...
    """Check if the SVF variable is a DummyObjVar"""
    def as_val_var(self) -> ValVar: ...
    """Downcast the SVF variable to a ValVar"""
    def as_obj_var(self) -> ObjVar: ...
    """Downcast the SVF variable to an ObjVar"""
    def as_gep_val_var(self) -> GepValVar: ...
    """Downcast the SVF variable to a GepValVar"""
    def as_gep_obj_var(self) -> GepObjVar: ...
    """Downcast the SVF variable to a GepObjVar"""
    def as_fun_obj_var(self) -> FunObjVar: ...
    """Downcast the SVF variable to a FunObjVar"""
    def as_fun_val_var(self) -> FunValVar: ...
    """Downcast the SVF variable to a FunValVar"""
    def as_arg_val_var(self) -> ArgValVar: ...
    """Downcast the SVF variable to an ArgValVar"""
    def as_ret_val_var(self) -> RetValPN: ...
    """Downcast the SVF variable to a RetValPN"""
    def as_dummy_val_var(self) -> DummyValVar: ...
    """Downcast the SVF variable to a DummyValVar"""
    def as_dummy_obj_var(self) -> DummyObjVar: ...
    """Downcast the SVF variable to a DummyObjVar"""

class ValVar(SVFVar):
    def get_icfg_node(self) -> ICFGNode: ...
    """Get the ICFG node that the SVF variable belongs to"""

    def get_value_name(self) -> str: ...
    """Get the value name of the SVF variable"""

    def get_function(self) -> "SVFFunction": ...
    """Get the function that the SVF variable belongs to"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF variable"""

    def is_fun_val_var(self) -> bool: ...
    """Check if the SVF variable is a FunValVar"""
    def as_fun_val_var(self) -> FunValVar: ...
    """Downcast the SVF variable to a FunValVar"""
    def is_arg_val_var(self) -> bool: ...
    """Check if the SVF variable is an ArgValVar"""
    def as_arg_val_var(self) -> ArgValVar: ...
    """Downcast the SVF variable to an ArgValVar"""
    def is_global_val_var(self) -> bool: ...
    """Check if the SVF variable is a GlobalValVar"""
    def as_global_val_var(self) -> GlobalValVar: ...
    """Downcast the SVF variable to a GlobalValVar"""
    def is_const_agg_val_var(self) -> bool: ...
    """Check if the SVF variable is a ConstAggValVar"""
    def as_const_agg_val_var(self) -> ConstAggValVar: ...
    """Downcast the SVF variable to a ConstAggValVar"""
    def is_const_data_val_var(self) -> bool: ...
    """Check if the SVF variable is a ConstDataValVar"""
    def as_const_data_val_var(self) -> ConstDataValVar: ...
    """Downcast the SVF variable to a ConstDataValVar"""
    def is_const_fp_val_var(self) -> bool: ...
    """Check if the SVF variable is a ConstFPValVar"""
    def as_const_fp_val_var(self) -> ConstFPValVar: ...
    """Downcast the SVF variable to a ConstFPValVar"""
    def is_const_int_val_var(self) -> bool: ...
    """Check if the SVF variable is a ConstIntValVar"""
    def as_const_int_val_var(self) -> ConstIntValVar: ...
    """Downcast the SVF variable to a ConstIntValVar"""
    def is_const_null_ptr_val_var(self) -> bool: ...
    """Check if the SVF variable is a ConstNullPtrValVar"""
    def as_const_null_ptr_val_var(self) -> ConstNullPtrValVar: ...
    """Downcast the SVF variable to a ConstNullPtrValVar"""
    def is_black_hole_val_var(self) -> bool: ...
    """Check if the SVF variable is a BlackHoleValVar"""
    def as_black_hole_val_var(self) -> BlackHoleValVar: ...
    """Downcast the SVF variable to a BlackHoleValVar"""
    def is_gep_val_var(self) -> bool: ...
    """Check if the SVF variable is a GepValVar"""
    def as_gep_val_var(self) -> GepValVar: ...
    """Downcast the SVF variable to a GepValVar"""
    def is_ret_val_pn(self) -> bool: ...
    """Check if the SVF variable is a RetValPN"""
    def as_ret_val_pn(self) -> RetValPN: ...
    """Downcast the SVF variable to a RetValPN"""
    def is_var_arg_val_pn(self) -> bool: ...
    """Check if the SVF variable is a VarArgValPN"""
    def as_var_arg_val_pn(self) -> VarArgValPN: ...
    """Downcast the SVF variable to a VarArgValPN"""
    def is_dummy_val_var(self) -> bool: ...
    """Check if the SVF variable is a DummyValVar"""
    def as_dummy_val_var(self) -> DummyValVar: ...
    """Downcast the SVF variable to a DummyValVar"""

class ObjVar(SVFVar):
    def get_value_name(self) -> str: ...
    """Get the value name of the SVF variable"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF variable"""

    def is_obj_var(node: SVFVar) -> bool: ...
    """Check if the SVF variable is an ObjVar"""

    def as_obj_var(node: SVFVar) -> ObjVar: ...
    """Downcast the SVF variable to an ObjVar"""

    def is_base_obj_var(node: ObjVar) -> bool: ...
    """Check if the SVF variable is a BaseObjVar"""

    def as_base_obj_var(node: ObjVar) -> BaseObjVar: ...
    """Downcast the SVF variable to a BaseObjVar"""

class ArgValVar(ValVar):
    def get_function(self) -> "SVFFunction": ...
    """Get the function that the SVF variable belongs to"""

    def get_parent(self) -> "SVFVar": ...
    """Get the parent of the SVF variable"""

    def get_arg_no(self) -> int: ...
    """Get the argument number"""

    def is_pointer(self) -> bool: ...
    """Check if the SVF variable is a pointer"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF variable"""

class GepValVar(ValVar):
    def get_constant_field_idx(self) -> int: ...
    """Get the constant field index"""

    def get_base_node(self) -> "SVFVar": ...
    """Get the base node"""

    def get_value_name(self) -> str: ...
    """Get the value name of the SVF variable"""

    def is_pointer(self) -> bool: ...
    """Check if the SVF variable is a pointer"""

    def get_type(self) -> SVFType: ...
    """Get the type of the SVF variable"""

    def get_function(self) -> "SVFFunction": ...
    """Get the function that the SVF variable belongs to"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF variable"""

class BaseObjVar(ObjVar):
    def get_type(self) -> SVFType: ...
    """Get the type of the SVF variable"""

    def get_byte_size_of_obj(self) -> int: ...
    """Get the byte size of the object"""

    def is_fun_obj_var(self) -> bool: ...
    """Check if the SVF variable is a FunObjVar"""
    def as_fun_obj_var(self) -> FunObjVar: ...
    """Downcast the SVF variable to a FunObjVar"""
    def is_global_obj_var(self) -> bool: ...
    """Check if the SVF variable is a GlobalObjVar"""
    def as_global_obj_var(self) -> GlobalObjVar: ...
    """Downcast the SVF variable to a GlobalObjVar"""
    def is_heap_obj_var(self) -> bool: ...
    """Check if the SVF variable is a HeapObjVar"""
    def as_heap_obj_var(self) -> HeapObjVar: ...
    """Downcast the SVF variable to a HeapObjVar"""
    def is_stack_obj_var(self) -> bool: ...
    """Check if the SVF variable is a StackObjVar"""
    def as_stack_obj_var(self) -> StackObjVar: ...
    """Downcast the SVF variable to a StackObjVar"""
    def is_const_agg_obj_var(self) -> bool: ...
    """Check if the SVF variable is a ConstAggObjVar"""
    def as_const_agg_obj_var(self) -> ConstAggObjVar: ...
    """Downcast the SVF variable to a ConstAggObjVar"""
    def is_const_data_obj_var(self) -> bool: ...
    """Check if the SVF variable is a ConstDataObjVar"""
    def as_const_data_obj_var(self) -> ConstDataObjVar: ...
    """Downcast the SVF variable to a ConstDataObjVar"""
    def is_dummy_obj_var(self) -> bool: ...
    """Check if the SVF variable is a DummyObjVar"""
    def as_dummy_obj_var(self) -> DummyObjVar: ...
    """Downcast the SVF variable to a DummyObjVar"""
    def get_base_mem_obj(self) -> "MemObj": ...
    """Get the base memory object"""

class GepObjVar(ObjVar):
    def get_constant_field_idx(self) -> int: ...
    """Get the constant field index"""

    def get_base_node(self) -> "SVFVar": ...
    """Get the base node"""

    def get_type(self) -> SVFType: ...
    """Get the type of the SVF variable"""

    def get_value_name(self) -> str: ...
    """Get the value name of the SVF variable"""

    def is_pointer(self) -> bool: ...
    """Check if the SVF variable is a pointer"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF variable"""

class FunObjVar(BaseObjVar):
    def is_declaration(self) -> bool: ...
    """Check if the function is a declaration"""

    def is_intrinsic(self) -> bool: ...
    """Check if the function is an intrinsic"""

    def has_address_taken(self) -> bool: ...
    """Check if the function has its address taken"""

    def is_vararg(self) -> bool: ...
    """Check if the function is vararg"""

    def is_uncalled_function(self) -> bool: ...
    """Check if the function is an uncalled function"""

    def has_return(self) -> bool: ...
    """Check if the function has a return"""

    def get_function_type(self) -> SVFType: ...
    """Get the function type"""

    def get_return_type(self) -> SVFType: ...
    """Get the return type"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF variable"""

class FunValVar(ValVar):
    def get_function(self) -> SVFFunction: ...
    """Get the function that the SVF variable belongs to"""

    def is_pointer(self) -> bool: ...
    """Check if the SVF variable is a pointer"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF variable"""

class ConstDataValVar(ValVar):
    pass

class ConstFPValVar(ConstDataValVar):
    def get_fp_value(self) -> float: ...
    """Get the floating point value"""

class ConstIntValVar(ConstDataValVar):
    def get_sext_value(self) -> int: ...
    """Get the sign extended value"""

    def get_zext_value(self) -> int: ...
    """Get the zero extended value"""

class ConstNullPtrValVar(ConstDataValVar):
    pass

class ConstDataObjVar(BaseObjVar):
    def is_const_fp_obj_var(self) -> bool: ...
    """Check if the SVF variable is a ConstFPObjVar"""
    def as_const_fp_obj_var(self) -> ConstFPObjVar: ...
    """Downcast the SVF variable to a ConstFPObjVar"""
    def is_const_int_obj_var(self) -> bool: ...
    """Check if the SVF variable is a ConstIntObjVar"""
    def as_const_int_obj_var(self) -> ConstIntObjVar: ...
    """Downcast the SVF variable to a ConstIntObjVar"""
    def is_const_null_ptr_obj_var(self) -> bool: ...
    """Check if the SVF variable is a ConstNullPtrObjVar"""
    def as_const_null_ptr_obj_var(self) -> ConstNullPtrObjVar: ...
    """Downcast the SVF variable to a ConstNullPtrObjVar"""

class ConstFPObjVar(ConstDataObjVar):
    def get_fp_value(self) -> float: ...
    """Get the floating point value"""



class ConstIntObjVar(ConstDataObjVar):
    def get_sext_value(self) -> int: ...
    """Get the sign extended value"""

    def get_zext_value(self) -> int: ...
    """Get the zero extended value"""

class RetValPN(ValVar):
    def get_function(self) -> "SVFFunction": ...
    """Get the function that the SVF variable belongs to"""

class VarArgValPN(ValVar):
    def get_function(self) -> "SVFFunction": ...
    """Get the function that the SVF variable belongs to"""


class SVFType:
    def get_kind(self) -> int: ...
    """Get the kind of the SVF type"""

    def get_byte_size(self) -> int: ...
    """Get the byte size of the SVF type"""

    def is_pointer_ty(self) -> bool: ...
    """Check if the SVF type is a pointer type"""

    def is_array_ty(self) -> bool: ...
    """Check if the SVF type is an array type"""

    def is_struct_ty(self) -> bool: ...
    """Check if the SVF type is a struct type"""

    def is_single_value_ty(self) -> bool: ...
    """Check if the SVF type is a single value type"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF type"""

    def as_pointer_type(self) -> SVFPointerType: ...
    """Downcast the SVF type to a SVFPointerType"""
    def as_integer_type(self) -> SVFIntegerType: ...
    """Downcast the SVF type to a SVFIntegerType"""
    def as_function_type(self) -> SVFFunctionType: ...
    """Downcast the SVF type to a SVFFunctionType"""
    def as_struct_type(self) -> SVFStructType: ...
    """Downcast the SVF type to a SVFStructType"""
    def as_array_type(self) -> SVFArrayType: ...
    """Downcast the SVF type to a SVFArrayType"""
    def as_other_type(self) -> SVFOtherType: ...
    """Downcast the SVF type to a SVFOtherType"""
    def is_pointer_type(self) -> bool: ...
    """Check if the SVF type is a pointer type"""
    def is_integer_type(self) -> bool: ...
    """Check if the SVF type is an integer type"""
    def is_function_type(self) -> bool: ...
    """Check if the SVF type is a function type"""
    def is_struct_type(self) -> bool: ...
    """Check if the SVF type is a struct type"""
    def is_array_type(self) -> bool: ...
    """Check if the SVF type is an array type"""
    def is_other_type(self) -> bool: ...
    """Check if the SVF type is an other type"""

class SVFPointerType(SVFType):
    def print(self) -> None: ...
    """Print the SVF pointer type"""



class SVFIntegerType(SVFType):
    def print(self) -> None: ...
    """Print the SVF integer type"""

    def set_sign_and_width(self, sign: bool, width: int) -> None: ...
    """Set the sign and width of the SVF integer type"""

    def is_signed(self) -> bool: ...
    """Check if the SVF integer type is signed"""

class SVFFunctionType(SVFType):
    def print(self) -> None: ...
    """Print the SVF function type"""

    def get_return_type(self) -> SVFType: ...
    """Get the return type of the SVF function type"""

class SVFStructType(SVFType):
    def print(self) -> None: ...
    """Print the SVF struct type"""

    def get_name(self) -> str: ...
    """Get the name of the SVF struct type"""

    def set_name(self, name: str) -> None: ...
    """Set the name of the SVF struct type"""

class SVFArrayType(SVFType):
    def print(self) -> None: ...
    """Print the SVF array type"""

    def get_type_of_element(self) -> SVFType: ...
    """Get the type of the element"""

    def set_type_of_element(self, type: SVFType) -> None: ...
    """Set the type of the element"""

    def set_num_of_element(self, num: int) -> None: ...
    """Set the number of elements"""

class SVFOtherType(SVFType):
    def print(self) -> None: ...
    """Print the SVF other type"""

    def get_repr(self) -> str: ...
    """Get the representation of the SVF other type"""

    def set_repr(self, repr: str) -> None: ...
    """Set the representation of the SVF other type"""


class SVFLLVMValue:
    def get_kind(self) -> int: ...
    """Get the kind of the SVF LLVM value"""

    def get_type(self) -> SVFType: ...
    """Get the type of the SVF LLVM value"""

    def get_name(self) -> str: ...
    """Get the name of the SVF LLVM value"""

    def set_name(self, name: str) -> None: ...
    """Set the name of the SVF LLVM value"""

    def get_source_loc(self) -> str: ...
    """Get the source location of the SVF LLVM value"""

    def set_source_loc(self, loc: str) -> None: ...
    """Set the source location of the SVF LLVM value"""

    def to_string(self) -> str: ...
    """Get the string representation of the SVF LLVM value"""

class SVFFunction(SVFLLVMValue):
    def is_declaration(self) -> bool: ...
    """Check if the function is a declaration"""

    def is_intrinsic(self) -> bool: ...
    """Check if the function is an intrinsic"""

    def has_address_taken(self) -> bool: ...
    """Check if the function has its address taken"""

    def get_function_type(self) -> SVFType: ...
    """Get the function type"""

    def get_return_type(self) -> SVFType: ...
    """Get the return type"""

    def arg_size(self) -> int: ...
    """Get the number of arguments"""

    def get_arg(self, idx: int) -> SVFVar: ...
    """Get the argument at the given index"""

    def get_entry_block(self) -> "SVFBasicBlock": ...
    """Get the entry block"""

    def get_exit_bb(self) -> "SVFBasicBlock": ...
    """Get the exit basic block"""

    def has_loop_info(self) -> bool: ...
    """Check if the function has loop info"""

    def get_loop_info(self) -> "SVFLoopInfo": ...
    """Get the loop info"""

    def dominate(self, bb1: "SVFBasicBlock", bb2: "SVFBasicBlock") -> bool: ...
    """Check if bb1 dominates bb2"""

    def post_dominate(self, bb1: "SVFBasicBlock", bb2: "SVFBasicBlock") -> bool: ...
    """Check if bb1 post dominates bb2"""


class SVFIR(SVFLLVMValue):
    def get_icfg(self) -> ICFG: ...
    """Get the ICFG of the SVFIR"""

    def get_call_sites(self) -> List[CallICFGNode]: ...
    """Get the call sites of the SVFIR"""

    def get_pag_node_num(self) -> int: ...
    """Get the number of PAG nodes"""



def get_pag(bitcodePath: str) -> SVFIR: ...
"""Analyze the bitcode file and return the SVFIR"""

def release_pag(pag: SVFIR) -> None: ...
"""Release the SVFIR"""