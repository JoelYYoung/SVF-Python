from typing import List, Iterator, Tuple, Any
from typing import overload, Optional, Union
from typing import TYPE_CHECKING
from enum import IntEnum

BIN_DIR: str
CURRENT_DIR: str
SVF_DIR: str
LLVM_DIR: str
EXTAPI_BC_PATH: str
Z3_DIR: str

def run_tool(tool_name: str, args: List[str]) -> None: ...

SVFFunction = Any
SVFValue = Any
SVFLLVMValue = Any
SVFLoop = Any
SVFLoopInfo = Any
BranchInst = Any
MemObj = Any
OffsetVarAndGepTypePair = Any

class ICFGNode:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def toString(self) -> str: ...
    """Get the string representation of the ICFG node"""

    def getId(self) -> int: ...
    """Get the id of the ICFG node"""

    def getFun(self) -> SVFFunction: ...
    """Get the function that the ICFG node belongs to"""

    def getBB(self) -> "SVFBasicBlock": ...
    """Get the basic block that the ICFG node belongs to"""

    def getSourceLoc(self) -> str: ...
    """Get the source location of the ICFG node"""

    def getSVFStmts(self) -> List["SVFStmt"]: ...
    """Get the SVF statements associated with the ICFG node"""

    def asFunEntry(self) -> "FunEntryICFGNode": ...
    """Downcast to FunEntryICFGNode"""

    def asFunExit(self) -> "FunExitICFGNode": ...
    """Downcast to FunExitICFGNode"""

    def asCall(self) -> "CallICFGNode": ...
    """Downcast to CallICFGNode"""

    def asRet(self) -> "RetICFGNode": ...
    """Downcast to RetICFGNode"""

    def isFunEntry(self) -> bool: ...
    """Check if the ICFG node is a function entry node"""

    def isFunExit(self) -> bool: ...
    """Check if the ICFG node is a function exit node"""

    def isCall(self) -> bool: ...
    """Check if the ICFG node is a function call node"""

    def isRet(self) -> bool: ...
    """Check if the ICFG node is a function return node"""

    def getOutEdges(self) -> List["ICFGEdge"]: ...
    """Get the out edges of the ICFG node"""

    def getInEdges(self) -> List["ICFGEdge"]: ...
    """Get the in edges of the ICFG node"""

class IntraICFGNode(ICFGNode):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def isRetInst(self) -> bool: ...
    """Check if this is a return instruction"""

class InterICFGNode(ICFGNode):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

class GlobalICFGNode(ICFGNode):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

class CallGraphNode:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def getFunction(self) -> SVFFunction: ...
    """Get the function of the call graph node"""
    
    def getId(self) -> int: ...
    """Get the ID of the call graph node"""

    def getName(self) -> str: ...
    """Get the name of the function"""
    
    def getInEdges(self) -> List["CallGraphEdge"]: ...
    """Get incoming edges of this node"""
    
    def getOutEdges(self) -> List["CallGraphEdge"]: ...
    """Get outgoing edges of this node"""
    
    def isReachableFromProgEntry(self) -> bool: ...
    """Check if this function is reachable from program entry"""
    
    def toString(self) -> str: ...
    """Get string representation of this node"""

    

class CallGraphEdge:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def getSrcNode(self) -> CallGraphNode: ...
    """Get the source node of the call graph edge"""
    
    def getDstNode(self) -> CallGraphNode: ...
    """Get the destination node of the call graph edge"""
    

    def getCallSiteID(self) -> int: ...
    """Get the call site ID"""
    
    def getSrcID(self) -> int: ...
    """Get source node ID"""
    
    def getDstID(self) -> int: ...
    """Get destination node ID"""

    def getDirectCalls(self) -> List[CallICFGNode]: ...
    """Get direct call ICFG nodes"""
    
    def getIndirectCalls(self) -> List[CallICFGNode]: ...
    """Get indirect call ICFG nodes"""
    
    def isDirectCallEdge(self) -> bool: ...
    """Check if this is a direct call edge"""
    
    def isIndirectCallEdge(self) -> bool: ...
    """Check if this is an indirect call edge"""
    
    def toString(self) -> str: ...
    """Get string representation"""


class CallGraph:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def getGNode(self, id: int) -> CallGraphNode: ...
    """Get the call graph node by ID"""
    
    def dump(self) -> None: ...
    """Dump the call graph to console"""
    
    def view(self) -> None: ...
    """View the call graph (opens visualization)"""
    
    def getCallGraphNodeByFunObj(self, fun: "FunObjVar") -> CallGraphNode: ...
    """Get the call graph node for the given function"""

    def getCallGraphNodeByName(self, name: str) -> CallGraphNode: ...
    """Get the call graph node for the given function name"""
    
    def getCallGraphNodeById(self, id: int) -> CallGraphNode: ...
    """Get the call graph node by ID"""
    
    def getNodes(self) -> List[CallGraphNode]: ...
    """Get all nodes in this call graph"""
    
    def isReachableBetweenFunctions(self, src: "SVFFunction", dst: "SVFFunction") -> bool: ...
    """Check if there's a path between two functions"""

class CallGraphSCC:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def isInCycle(self, id: int) -> bool: ...
    """Check if a node is in a cycle"""

class FunEntryICFGNode(ICFGNode):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def getFormalParms(self) -> List["SVFVar"]: ...
    """Get the formal parameters of the function"""

    def addFormalParm(self, parm: "SVFVar") -> None: ...
    """Add a formal parameter to the function"""

class FunExitICFGNode(ICFGNode):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def getFormalRet(self) -> "SVFVar": ...
    """Get the formal return value of the function"""

    def addFormalRet(self, ret: "SVFVar") -> None: ...
    """Add a formal return value to the function"""

class CallICFGNode(ICFGNode):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getCaller(self) -> "FunEntryICFGNode": ...
    """Get the caller function"""

    def getCalledFunction(self) -> "FunObjVar": ...
    """Get the called function"""

    def getActualParms(self) -> List["SVFVar"]: ...
    """Get the actual parameters of the call"""

    def addActualParms(self, parm: "SVFVar") -> None: ...
    """Add an actual parameter to the call"""

    def getArgument(self, idx: int) -> "SVFVar": ...
    """Get the argument at the given index"""

    def isVarArg(self) -> bool: ...
    """Check if the call is a vararg call"""

    def isVirtualCall(self) -> bool: ...
    """Check if the call is a virtual call"""

    def getRetICFGNode(self) -> "RetICFGNode": ...
    """Get the return ICFG node"""

class RetICFGNode(ICFGNode):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getActualRet(self) -> "SVFVar": ...
    """Get the actual return value"""

    def addActualRet(self, ret: "SVFVar") -> None: ...
    """Add an actual return value"""

    def getCallICFGNode(self) -> "CallICFGNode": ...
    """Get the call ICFG node"""

class ICFGEdge:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def toString(self) -> str: ...
    """Get the string representation of the ICFG edge"""

    def isCFGEdge(self) -> bool: ...
    """Check if the edge is a CFG edge"""

    def isCallCFGEdge(self) -> bool: ...
    """Check if the edge is a call CFG edge"""

    def isRetCFGEdge(self) -> bool: ...
    """Check if the edge is a return CFG edge"""

    def isIntraCFGEdge(self) -> bool: ...
    """Check if the edge is an intra CFG edge"""

    def getSrcNode(self) -> ICFGNode: ...
    """Get the source node of the edge"""

    def getDstNode(self) -> ICFGNode: ...
    """Get the destination node of the edge"""

    def asIntraCFGEdge(self) -> "IntraCFGEdge": ...
    """Downcast to IntraCFGEdge"""

    def asCallCFGEdge(self) -> "CallCFGEdge": ...
    """Downcast to CallCFGEdge"""

    def asRetCFGEdge(self) -> "RetCFGEdge": ...
    """Downcast to RetCFGEdge"""



class IntraCFGEdge(ICFGEdge):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getCondition(self) -> "SVFStmt": ...
    """Get the condition of the edge"""

    def getSuccessorCondValue(self) -> SVFValue: ...
    """Get the successor condition value"""

class CallCFGEdge(ICFGEdge):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getCallSite(self) -> "CallICFGNode": ...
    """Get the call site"""

    def getCallPEs(self) -> List["CallPE"]: ...
    """Get the call PEs"""

class RetCFGEdge(ICFGEdge):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getCallSite(self) -> "CallICFGNode": ...
    """Get the call site"""

    def getRetPE(self) -> "RetPE": ...
    """Get the return PE"""


class SVFStmt:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def toString(self) -> str: ...
    """Get the string representation of the SVF statement"""

    def getEdgeId(self) -> int: ...
    """Get the ID of the SVF statement"""

    def getICFGNode(self) -> ICFGNode: ...
    """Get the ICFG node that the SVF statement belongs to"""

    def getValue(self) -> SVFValue: ...
    """Get the value of the SVF statement"""

    def getBB(self) -> "SVFBasicBlock": ...
    """Get the basic block that the SVF statement belongs to"""

    def isAddrStmt(self) -> bool: ...
    """Check if the SVF statement is an address statement"""

    def isCopyStmt(self) -> bool: ...
    """Check if the SVF statement is a copy statement"""

    def isStoreStmt(self) -> bool: ...
    """Check if the SVF statement is a store statement"""

    def isLoadStmt(self) -> bool: ...
    """Check if the SVF statement is a load statement"""

    def isCallPE(self) -> bool: ...
    """Check if the SVF statement is a call PE"""

    def isRetPE(self) -> bool: ...
    """Check if the SVF statement is a return PE"""

    def isGepStmt(self) -> bool: ...
    """Check if the SVF statement is a GEP statement"""

    def isPhiStmt(self) -> bool: ...
    """Check if the SVF statement is a phi statement"""

    def isSelectStmt(self) -> bool: ...
    """Check if the SVF statement is a select statement"""

    def isCmpStmt(self) -> bool: ...
    """Check if the SVF statement is a compare statement"""

    def isBinaryOpStmt(self) -> bool: ...
    """Check if the SVF statement is a binary operation statement"""

    def isUnaryOpStmt(self) -> bool: ...
    """Check if the SVF statement is a unary operation statement"""

    def isBranchStmt(self) -> bool: ...
    """Check if the SVF statement is a branch statement"""

    def asAddrStmt(self) -> "AddrStmt": ...
    """Downcast the SVF statement to an address statement"""

    def asCopyStmt(self) -> "CopyStmt": ...
    """Downcast the SVF statement to a copy statement"""

    def asStoreStmt(self) -> "StoreStmt": ...
    """Downcast the SVF statement to a store statement"""

    def asLoadStmt(self) -> "LoadStmt": ...
    """Downcast the SVF statement to a load statement"""

    def asCallPE(self) -> "CallPE": ...
    """Downcast the SVF statement to a call PE"""

    def asRetPE(self) -> "RetPE": ...
    """Downcast the SVF statement to a return PE"""


    def asGepStmt(self) -> "GepStmt": ...
    """Downcast the SVF statement to a GEP statement"""

    def asPhiStmt(self) -> "PhiStmt": ...
    """Downcast the SVF statement to a phi statement"""

    def asSelectStmt(self) -> "SelectStmt": ...
    """Downcast the SVF statement to a select statement"""

    def asCmpStmt(self) -> "CmpStmt": ...
    """Downcast the SVF statement to a compare statement"""

    def asBinaryOpStmt(self) -> "BinaryOPStmt": ...
    """Downcast the SVF statement to a binary operation statement"""

    def asUnaryOpStmt(self) -> "UnaryOPStmt": ...
    """Downcast the SVF statement to a unary operation statement"""

    def asBranchStmt(self) -> "BranchStmt": ...
    """Downcast the SVF statement to a branch statement"""

class AssignStmt(SVFStmt):
    
    def getLHSVar(self) -> "SVFVar": ...
    """Get the LHS variable of the address statement"""

    def getLHSVarID(self) -> int: ...
    """Get the ID of the LHS variable of the address statement"""

    def getRHSVar(self) -> "SVFVar": ...
    """Get the RHS variable of the address statement"""

    def getRHSVarID(self) -> int: ...
    """Get the ID of the RHS variable of the address statement"""

class AddrStmt(AssignStmt):
    def getArrSize(self) -> SVFValue: ...
    """Get the array size of the address statement"""

class CopyStmt(AssignStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getCopyKind(self) -> int: ...
    """Get the copy kind of the copy statement"""

    def isBitcast(self) -> bool: ...
    """Check if the copy statement is a bitcast"""

    def isInt2Ptr(self) -> bool: ...
    """Check if the copy statement is an int2ptr"""

    def isPtr2Int(self) -> bool: ...
    """Check if the copy statement is a ptr2int"""

    def isSext(self) -> bool: ...
    """Check if the copy statement is a sext"""

    def isZext(self) -> bool: ...
    """Check if the copy statement is a zext"""

    def isValueCopy(self) -> bool: ...
    """Check if the copy statement is a value copy"""



class StoreStmt(AssignStmt):
    ...

class LoadStmt(AssignStmt):
    ...

class CallPE(AssignStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getCallSite(self) -> "CallICFGNode": ...
    """Get the call site"""

    def getFunEntryICFGNode(self) -> "FunEntryICFGNode": ...
    """Get the function entry ICFG node"""

class RetPE(AssignStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getCallSite(self) -> "CallICFGNode": ...
    """Get the call site"""


    def getFunExitICFGNode(self) -> "FunExitICFGNode": ...
    """Get the function exit ICFG node"""

class GepStmt(AssignStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def isConstantOffset(self) -> bool: ...
    """Check if the GEP statement has a constant offset"""

    def getConstantOffset(self) -> int: ...
    """Get the constant offset"""

    def getConstantByteOffset(self) -> int: ...
    """Get the constant byte offset"""

    def getConstantStructFldIdx(self) -> int: ...
    """Get the constant struct field index"""

    def getOffsetVarAndGepTypePairVec(self) -> List["OffsetVarAndGepTypePair"]: ...
    """Get the offset variable and GEP type pair vector"""

    def getSrcPointeeType(self) -> "SVFType": ...
    """Get the source pointee type"""

class MultiOpndStmt(SVFStmt):
    def getOpVar(self, ID: int) -> "SVFVar": ...
    """Get the operand variable"""

    def getOpVarId(self) -> int: ...
    """Get the ID of the operand variable"""

    def getOpndVars(self) -> List["SVFVar"]: ...  
    """Get the operand variables"""

    def getRes(self) -> "SVFVar": ...
    """Get the result variable"""

    def getResId(self) -> int: ...
    """Get the ID of the result variable"""

    def getOpVarNum(self) -> int: ...
    """Get the number of operand variables"""

    def __iter__(self) -> Iterator["SVFVar"]: ...
    """Iterate over the operand variables"""

    
class PhiStmt(MultiOpndStmt):

    def getOpICFGNode(self, idx: int) -> ICFGNode: ...
    """Get the operand ICFG node"""

    def isFunRetPhi(self) -> bool: ...
    """Check if the phi statement is a function return phi"""

class SelectStmt(MultiOpndStmt):
    def getCondition(self) -> "SVFVar": ...
    """Get the condition variable"""

    def getTrueValue(self) -> "SVFVar": ...
    """Get the true value variable"""

    def getFalseValue(self) -> "SVFVar": ...
    """Get the false value variable"""

class CmpStmt(MultiOpndStmt):
    
    def getPredicate(self) -> int: ...
    """Get the predicate"""

class BinaryOPStmt(MultiOpndStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def getOpcode(self) -> int: ...
    """Get the opcode of the binary operation"""


class UnaryOPStmt(SVFStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getOp(self) -> int: ...
    """Get the opcode"""

    def getRes(self) -> "SVFVar": ...
    """Get the result variable"""

    def getResVar(self) -> "SVFVar": ...
    """Get the result variable"""

    def getResId(self) -> int: ...
    """Get the ID of the result variable"""

    def getOpVar(self) -> "SVFVar": ...
    """Get the operand variable"""

    def getOpVarId(self) -> int: ...
    """Get the ID of the operand variable"""

    def getOpcode(self) -> int: ...
    """Get the opcode of the unary operation"""


class BranchStmt(SVFStmt):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""

    def getSuccessors(self) -> List[ICFGNode]: ...
    """Get the successors of the branch statement"""

    def getNumSuccessors(self) -> int: ...
    """Get the number of successors"""

    def isConditional(self) -> bool: ...
    """Check if the branch statement is conditional"""

    def isUnconditional(self) -> bool: ...
    """Check if the branch statement is unconditional"""

    def getCondition(self) -> "SVFVar": ...
    """Get the condition variable"""

    def getBranchInst(self) -> "BranchInst": ...
    """Get the branch instruction"""



class ICFG:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getNodes(self) -> List[ICFGNode]: ...
    """Get the nodes of the ICFG"""

    def getGNode(self, id: int) -> ICFGNode: ...
    """Get the ICFG node with the given ID"""

    def getGlobalICFGNode(self) -> ICFGNode: ...
    """Get the global ICFG node"""

    def dump(self, file: str) -> None: ...
    """Dump the ICFG to a file"""

    def __iter__(self) -> Iterator[tuple[int, ICFGNode]]: ...
    """Iterate over the ICFG nodes"""

    def getFunEntryICFGNode(self, fun: 'FunObjVar') -> FunEntryICFGNode: ...
    """Get the function entry ICFG node for the given function"""


class SVFVar:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getName(self) -> str: ...
    """Get the name of the SVF variable"""

    def getId(self) -> int: ...
    """Get the ID of the SVF variable"""

    def isPointer(self) -> bool: ...
    """Check if the SVF variable is a pointer"""

    def isConstDataOrAggDataButNotNullPtr(self) -> bool: ...
    """Check if the SVF variable is const data or agg data but not a null pointer"""

    def isIsolatedNode(self) -> bool: ...
    """Check if the SVF variable is an isolated node"""

    def getValueName(self) -> str: ...
    """Get the value name of the SVF variable"""

    def getFunction(self) -> SVFFunction: ...
    """Get the function that the SVF variable belongs to"""

    def ptrInUncalledFunction(self) -> bool: ...
    """Check if the pointer is in an uncalled function"""

    def isConstDataOrAggData(self) -> bool: ...
    """Check if the SVF variable is const data or agg data"""

    def toString(self) -> str: ...
    """Get the string representation of the SVF variable"""

    def isValVar(self) -> bool: ...
    """Check if the SVF variable is a ValVar"""
    def isObjVar(self) -> bool: ...
    """Check if the SVF variable is an ObjVar"""
    def isGepValVar(self) -> bool: ...
    """Check if the SVF variable is a GepValVar"""
    def isGepObjVar(self) -> bool: ...
    """Check if the SVF variable is a GepObjVar"""
    def isFunObjVar(self) -> bool: ...
    """Check if the SVF variable is a FunObjVar"""
    def isFunValVar(self) -> bool: ...
    """Check if the SVF variable is a FunValVar"""
    def isArgValVar(self) -> bool: ...
    """Check if the SVF variable is an ArgValVar"""
    def isRetValVar(self) -> bool: ...
    """Check if the SVF variable is a RetValPN"""
    def isDummyValVar(self) -> bool: ...
    """Check if the SVF variable is a DummyValVar"""
    def isDummyObjVar(self) -> bool: ...
    """Check if the SVF variable is a DummyObjVar"""
    def asValVar(self) -> "ValVar": ...
    """Downcast the SVF variable to a ValVar"""
    def asObjVar(self) -> "ObjVar": ...
    """Downcast the SVF variable to an ObjVar"""
    def asGepValVar(self) -> "GepValVar": ...
    """Downcast the SVF variable to a GepValVar"""
    def asGepObjVar(self) -> "GepObjVar": ...
    """Downcast the SVF variable to a GepObjVar"""
    def asFunObjVar(self) -> "FunObjVar": ...
    """Downcast the SVF variable to a FunObjVar"""
    def asFunValVar(self) -> "FunValVar": ...
    """Downcast the SVF variable to a FunValVar"""
    def asArgValVar(self) -> "ArgValVar": ...
    """Downcast the SVF variable to an ArgValVar"""
    def asRetValVar(self) -> "RetValPN": ...
    """Downcast the SVF variable to a RetValPN"""
    def asDummyValVar(self) -> "DummyValVar": ...
    """Downcast the SVF variable to a DummyValVar"""
    def asDummyObjVar(self) -> "DummyObjVar": ...
    """Downcast the SVF variable to a DummyObjVar"""

    def getInEdges(self) -> List['SVFStmt']: ...
    def getOutEdges(self) -> List['SVFStmt']: ...

class ValVar(SVFVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getICFGNode(self) -> ICFGNode: ...
    """Get the ICFG node that the SVF variable belongs to"""

    def getValueName(self) -> str: ...
    """Get the value name of the SVF variable"""

    def getFunction(self) -> SVFFunction: ...
    """Get the function that the SVF variable belongs to"""

    def toString(self) -> str: ...
    """Get the string representation of the SVF variable"""

    def getType(self) -> "SVFType": ...
    """Get the type of the SVF variable"""

    def isFunValVar(self) -> bool: ...
    """Check if the SVF variable is a FunValVar"""
    def asFunValVar(self) -> "FunValVar": ...
    """Downcast the SVF variable to a FunValVar"""
    def isArgValVar(self) -> bool: ...
    """Check if the SVF variable is an ArgValVar"""
    def asArgValVar(self) -> "ArgValVar": ...
    """Downcast the SVF variable to an ArgValVar"""
    def isGlobalValVar(self) -> bool: ...
    """Check if the SVF variable is a GlobalValVar"""
    def asGlobalValVar(self) -> "GlobalValVar": ...
    """Downcast the SVF variable to a GlobalValVar"""
    def isConstAggValVar(self) -> bool: ...
    """Check if the SVF variable is a ConstAggValVar"""
    def asConstAggValVar(self) -> "ConstAggValVar": ...
    """Downcast the SVF variable to a ConstAggValVar"""
    def isConstDataValVar(self) -> bool: ...
    """Check if the SVF variable is a ConstDataValVar"""
    def asConstDataValVar(self) -> "ConstDataValVar": ...
    """Downcast the SVF variable to a ConstDataValVar"""
    def isConstFPValVar(self) -> bool: ...
    """Check if the SVF variable is a ConstFPValVar"""
    def asConstFPValVar(self) -> "ConstFPValVar": ...
    """Downcast the SVF variable to a ConstFPValVar"""
    def isConstIntValVar(self) -> bool: ...
    """Check if the SVF variable is a ConstIntValVar"""
    def asConstIntValVar(self) -> "ConstIntValVar": ...
    """Downcast the SVF variable to a ConstIntValVar"""
    def isConstNullPtrValVar(self) -> bool: ...
    """Check if the SVF variable is a ConstNullPtrValVar"""
    def asConstNullPtrValVar(self) -> "ConstNullPtrValVar": ...
    """Downcast the SVF variable to a ConstNullPtrValVar"""
    def isBlackHoleValVar(self) -> bool: ...
    """Check if the SVF variable is a BlackHoleValVar"""
    def asBlackHoleValVar(self) -> "BlackHoleValVar": ...
    """Downcast the SVF variable to a BlackHoleValVar"""
    def isGepValVar(self) -> bool: ...
    """Check if the SVF variable is a GepValVar"""
    def asGepValVar(self) -> "GepValVar": ...
    """Downcast the SVF variable to a GepValVar"""
    def isRetValPN(self) -> bool: ...
    """Check if the SVF variable is a RetValPN"""
    def asRetValPN(self) -> "RetValPN": ...
    """Downcast the SVF variable to a RetValPN"""
    def isVarArgValPN(self) -> bool: ...
    """Check if the SVF variable is a VarArgValPN"""
    def asVarArgValPN(self) -> "VarArgValPN": ...
    """Downcast the SVF variable to a VarArgValPN"""
    def isDummyValVar(self) -> bool: ...
    """Check if the SVF variable is a DummyValVar"""
    def asDummyValVar(self) -> "DummyValVar": ...
    """Downcast the SVF variable to a DummyValVar"""

class ObjVar(SVFVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getValueName(self) -> str: ...
    """Get the value name of the SVF variable"""

    def toString(self) -> str: ...
    """Get the string representation of the SVF variable"""

    def isObjVar(node: SVFVar) -> bool: ...
    """Check if the SVF variable is an ObjVar"""

    def asObjVar(node: SVFVar) -> "ObjVar": ...
    """Downcast the SVF variable to an ObjVar"""

    def isBaseObjVar(node: "ObjVar") -> bool: ...
    """Check if the SVF variable is a BaseObjVar"""

    def asBaseObjVar(node: "ObjVar") -> "BaseObjVar": ...
    """Downcast the SVF variable to a BaseObjVar"""

    def isGepObjVar(node: "ObjVar") -> bool: ...
    """Check if the SVF variable is a GepObjVar"""

    def asGepObjVar(node: "ObjVar") -> "GepObjVar": ...
    """Downcast the SVF variable to a GepObjVar"""

    def isFunObjVar(node: "ObjVar") -> bool: ...
    """Check if the SVF variable is a FunObjVar"""

    def asFunObjVar(node: "ObjVar") -> "FunObjVar": ...
    """Downcast the SVF variable to a FunObjVar"""

    def isConstAggObjVar(self) -> bool: ...
    """Check if this is a constant aggregate object variable"""
    
    def isConstDataObjVar(self) -> bool: ...
    """Check if this is a constant data object variable"""
    
    def isConstFPObjVar(self) -> bool: ...
    """Check if this is a constant floating point object variable"""
    
    def isConstIntObjVar(self) -> bool: ...
    """Check if this is a constant integer object variable"""
    
    def isConstNullPtrObjVar(self) -> bool: ...
    """Check if this is a constant null pointer object variable"""
    
    def isGlobalObjVar(self) -> bool: ...
    """Check if this is a global object variable"""
    
    def isHeapObjVar(self) -> bool: ...
    """Check if this is a heap object variable"""
    
    def isStackObjVar(self) -> bool: ...
    """Check if this is a stack object variable"""
    
    def asConstAggObjVar(self) -> "ConstAggObjVar": ...
    """Cast to ConstAggObjVar if possible"""
    
    def asConstDataObjVar(self) -> "ConstDataObjVar": ...
    """Cast to ConstDataObjVar if possible"""
    
    def asConstFPObjVar(self) -> "ConstFPObjVar": ...
    """Cast to ConstFPObjVar if possible"""
    
    def asConstIntObjVar(self) -> "ConstIntObjVar": ...
    """Cast to ConstIntObjVar if possible"""
    
    def asConstNullPtrObjVar(self) -> "ConstNullPtrObjVar": ...
    """Cast to ConstNullPtrObjVar if possible"""
    
    def asGlobalObjVar(self) -> "GlobalObjVar": ...
    """Cast to GlobalObjVar if possible"""
    
    def asHeapObjVar(self) -> "HeapObjVar": ...
    """Cast to HeapObjVar if possible"""
    
    def asStackObjVar(self) -> "StackObjVar": ...
    """Cast to StackObjVar if possible"""

class ArgValVar(ValVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getFunction(self) -> SVFFunction: ...
    """Get the function that the SVF variable belongs to"""

    def getParent(self) -> "SVFVar": ...
    """Get the parent of the SVF variable"""

    def getArgNo(self) -> int: ...
    """Get the argument number"""

    def isPointer(self) -> bool: ...
    """Check if the SVF variable is a pointer"""

    def isArgOfUncalledFunction(self) -> bool: ...
    """Check if this is an argument of an uncalled function"""

class GepValVar(ValVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getConstantFieldIdx(self) -> int: ...
    """Get the constant field index"""

    def getBaseNode(self) -> "SVFVar": ...
    """Get the base node"""

    def getValueName(self) -> str: ...
    """Get the value name of the SVF variable"""

    def isPointer(self) -> bool: ...
    """Check if the SVF variable is a pointer"""

    def getType(self) -> SVFType: ...
    """Get the type of the SVF variable"""

    def getFunction(self) -> SVFFunction: ...
    """Get the function that the SVF variable belongs to"""

class BaseObjVar(ObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getType(self) -> SVFType: ...
    """Get the type of the SVF variable"""

    def getByteSizeOfObj(self) -> int: ...
    """Get the byte size of the object"""

    def isFunObjVar(self) -> bool: ...
    """Check if the SVF variable is a FunObjVar"""
    def asFunObjVar(self) -> "FunObjVar": ...
    """Downcast the SVF variable to a FunObjVar"""
    def isGlobalObjVar(self) -> bool: ...
    """Check if the SVF variable is a GlobalObjVar"""
    def asGlobalObjVar(self) -> "GlobalObjVar": ...
    """Downcast the SVF variable to a GlobalObjVar"""
    def isHeapObjVar(self) -> bool: ...
    """Check if the SVF variable is a HeapObjVar"""
    def asHeapObjVar(self) -> "HeapObjVar": ...
    """Downcast the SVF variable to a HeapObjVar"""
    def isStackObjVar(self) -> bool: ...
    """Check if the SVF variable is a StackObjVar"""
    def asStackObjVar(self) -> "StackObjVar": ...
    """Downcast the SVF variable to a StackObjVar"""
    def isConstAggObjVar(self) -> bool: ...
    """Check if the SVF variable is a ConstAggObjVar"""
    def asConstAggObjVar(self) -> "ConstAggObjVar": ...
    """Downcast the SVF variable to a ConstAggObjVar"""
    def isConstDataObjVar(self) -> bool: ...
    """Check if the SVF variable is a ConstDataObjVar"""
    def asConstDataObjVar(self) -> "ConstDataObjVar": ...
    """Downcast the SVF variable to a ConstDataObjVar"""
    def isDummyObjVar(self) -> bool: ...
    """Check if the SVF variable is a DummyObjVar"""
    def asDummyObjVar(self) -> "DummyObjVar": ...
    """Downcast the SVF variable to a DummyObjVar"""
    def getBaseMemObj(self) -> "MemObj": ...
    """Get the base memory object"""

    def getICFGNode(self) -> ICFGNode: ...
    """Get the ICFG node associated with this object variable"""
    
    
    def getMaxFieldOffsetLimit(self) -> int: ...
    """Get the maximum field offset limit"""
    
    def getNumOfElements(self) -> int: ...
    """Get the number of elements"""
    
    def setNumOfElements(self, num: int) -> None: ...
    """Set the number of elements"""
    
    def isArray(self) -> bool: ...
    """Check if this is an array"""
    
    def isBlackHoleObj(self) -> bool: ...
    """Check if this is a black hole object"""
    
    def isConstDataOrConstGlobal(self) -> bool: ...
    """Check if this is constant data or constant global"""
    
    def isConstantArray(self) -> bool: ...
    """Check if this is a constant array"""
    
    def isConstantByteSize(self) -> bool: ...
    """Check if this has constant byte size"""
    
    def isConstantStruct(self) -> bool: ...
    """Check if this is a constant struct"""
    
    def isFieldInsensitive(self) -> bool: ...
    """Check if this is field insensitive"""
    
    def isFunction(self) -> bool: ...
    """Check if this is a function"""
    
    def isGlobalObj(self) -> bool: ...
    """Check if this is a global object"""
    
    def isHeap(self) -> bool: ...
    """Check if this is on the heap"""
    
    def isStack(self) -> bool: ...
    """Check if this is on the stack"""
    
    def isStaticObj(self) -> bool: ...
    """Check if this is a static object"""
    
    def isStruct(self) -> bool: ...
    """Check if this is a struct"""
    
    def isVarArray(self) -> bool: ...
    """Check if this is a variable array"""
    
    def isVarStruct(self) -> bool: ...
    """Check if this is a variable struct"""
    
    def setFieldInsensitive(self) -> None: ...
    """Set as field insensitive"""
    
    def setFieldSensitive(self) -> None: ...
    """Set as field sensitive"""

class GepObjVar(ObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getConstantFieldIdx(self) -> int: ...
    """Get the constant field index"""

    def getBaseNode(self) -> "SVFVar": ...
    """Get the base node"""

    def getType(self) -> SVFType: ...
    """Get the type of the SVF variable"""

    def getValueName(self) -> str: ...
    """Get the value name of the SVF variable"""

    def isPointer(self) -> bool: ...
    """Check if the SVF variable is a pointer"""

class HeapObjVar(BaseObjVar):
    ...

class StackObjVar(BaseObjVar):
    ...

class FunObjVar(BaseObjVar):
    
    def isDeclaration(self) -> bool: ...
    """Check if the function is a declaration"""

    def isIntrinsic(self) -> bool: ...
    """Check if the function is an intrinsic"""

    def hasAddressTaken(self) -> bool: ...
    """Check if the function has its address taken"""

    def isVarArg(self) -> bool: ...
    """Check if the function is vararg"""

    def arg_size(self) -> int: ...
    """Get the size of the arguments"""

    def getArg(self, idx: int) -> "SVFVar": ...
    """Get the argument at the given index"""

    def isUncalledFunction(self) -> bool: ...
    """Check if the function is an uncalled function"""

    def hasReturn(self) -> bool: ...
    """Check if the function has a return"""

    def getFunctionType(self) -> SVFType: ...
    """Get the function type"""

    def getReturnType(self) -> SVFType: ...
    """Get the return type"""

    def toString(self) -> str: ...
    """Get the string representation of the SVF variable"""
    
    def dominates(self, bbKey: SVFBasicBlock, bbValue: SVFBasicBlock) -> bool: ...
    """Check if one basic block dominates another"""
    
    def postDominate(self, bbKey: SVFBasicBlock, bbValue: SVFBasicBlock) -> bool: ...
    """Check if one basic block post-dominates another"""

class FunValVar(ValVar):
    def getFunction(self) -> SVFFunction: ...
    """Get the function that the SVF variable belongs to"""

    def isPointer(self) -> bool: ...
    """Check if the SVF variable is a pointer"""

class GlobalValVar(ValVar):
    ...

class ConstDataValVar(ValVar):
    ...
    

class ConstFPValVar(ConstDataValVar):
    def getFPValue(self) -> float: ...
    """Get the floating point value"""


class ConstIntValVar(ConstDataValVar):
    def getSExtValue(self) -> int: ...
    """Get the sign extended value"""

    def getZExtValue(self) -> int: ...
    """Get the zero extended value"""

class ConstNullPtrValVar(ConstDataValVar):
    ...
    

class ConstDataObjVar(BaseObjVar):
    ...

class ConstFPObjVar(ConstDataObjVar):
    
    def getFPValue(self) -> float: ...
    """Get the floating point value"""



class ConstIntObjVar(ConstDataObjVar):
    def getSExtValue(self) -> int: ...
    """Get the sign extended value"""

    def getZExtValue(self) -> int: ...
    """Get the zero extended value"""

class RetValPN(ValVar):
    
    def getFunction(self) -> SVFFunction: ...
    """Get the function that the SVF variable belongs to"""

class VarArgValPN(ValVar):
    
    def getFunction(self) -> SVFFunction: ...
    """Get the function that the SVF variable belongs to"""


class SVFType:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getKind(self) -> int: ...
    """Get the kind of the SVF type"""

    def getByteSize(self) -> int: ...
    """Get the byte size of the SVF type"""

    def isPointerTy(self) -> bool: ...
    """Check if the SVF type is a pointer type"""

    def isArrayTy(self) -> bool: ...
    """Check if the SVF type is an array type"""

    def isStructTy(self) -> bool: ...
    """Check if the SVF type is a struct type"""

    def isSingleValueTy(self) -> bool: ...
    """Check if the SVF type is a single value type"""

    def toString(self) -> str: ...
    """Get the string representation of the SVF type"""

    def asPointerType(self) -> SVFPointerType: ...
    """Downcast the SVF type to a SVFPointerType"""
    def asIntegerType(self) -> SVFIntegerType: ...
    """Downcast the SVF type to a SVFIntegerType"""
    def asFunctionType(self) -> SVFFunctionType: ...
    """Downcast the SVF type to a SVFFunctionType"""
    def asStructType(self) -> SVFStructType: ...
    """Downcast the SVF type to a SVFStructType"""
    def asArrayType(self) -> SVFArrayType: ...
    """Downcast the SVF type to a SVFArrayType"""
    def asOtherType(self) -> SVFOtherType: ...
    """Downcast the SVF type to a SVFOtherType"""
    def isPointerType(self) -> bool: ...
    """Check if the SVF type is a pointer type"""
    def isIntegerType(self) -> bool: ...
    """Check if the SVF type is an integer type"""
    def isFunctionType(self) -> bool: ...
    """Check if the SVF type is a function type"""
    def isStructType(self) -> bool: ...
    """Check if the SVF type is a struct type"""
    def isArrayType(self) -> bool: ...
    """Check if the SVF type is an array type"""
    def isOtherType(self) -> bool: ...
    """Check if the SVF type is an other type"""

class SVFPointerType(SVFType):
    def print(self) -> None: ...
    """Print the SVF pointer type"""



class SVFIntegerType(SVFType):
    def print(self) -> None: ...
    """Print the SVF integer type"""

    def setSignAndWidth(self, sign: bool, width: int) -> None: ...
    """Set the sign and width of the SVF integer type"""

    def isSigned(self) -> bool: ...
    """Check if the SVF integer type is signed"""

class SVFFunctionType(SVFType):
    def print(self) -> None: ...
    """Print the SVF function type"""

    def getReturnType(self) -> SVFType: ...
    """Get the return type of the SVF function type"""

class SVFStructType(SVFType):
    def print(self) -> None: ...
    """Print the SVF struct type"""

    def getName(self) -> str: ...
    """Get the name of the SVF struct type"""

    def setName(self, name: str) -> None: ...
    """Set the name of the SVF struct type"""

class SVFArrayType(SVFType):
    def print(self) -> None: ...
    """Print the SVF array type"""

    def getTypeOfElement(self) -> SVFType: ...
    """Get the type of the element"""

    def setTypeOfElement(self, type: SVFType) -> None: ...
    """Set the type of the element"""

    def setNumOfElement(self, num: int) -> None: ...
    """Set the number of elements"""

class SVFOtherType(SVFType):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def print(self) -> None: ...
    """Print the SVF other type"""

    def getRepr(self) -> str: ...
    """Get the representation of the SVF other type"""

    def setRepr(self, repr: str) -> None: ...
    """Set the representation of the SVF other type"""


class SVFIR(SVFLLVMValue):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getICFG(self) -> ICFG: ...
    """Get the ICFG of the SVFIR"""

    def getCallSites(self) -> List[CallICFGNode]: ...
    """Get the call sites of the SVFIR"""

    def getPAGNodeNum(self) -> int: ...
    """Get the number of PAG nodes"""
    
    def getCallGraph(self) -> "CallGraph": ...
    """Get the call graph of the SVFIR"""

    def dump(self, filename: str) -> None: ...
    """Dump the SVFIR to a file"""

    def getModuleIdentifier(self) -> str: ...
    """Get the module identifier of the SVFIR"""

    def __iter__(self) -> Iterator[Tuple[int, SVFVar]]: ...
    
    def getBaseObject(self, id: int) -> BaseObjVar: ...
    """Get the base object with the given ID"""
    
    def getGNode(self, id: int) -> SVFVar: ...
    """Get the SVFVar with the given ID"""
    
    def getGepObjVar(self, id: int, offset: int) -> int: ...
    """Get the GEP object variable ID"""
    
    def getNumOfFlattenElements(self, T: SVFType) -> int: ...
    """Get the number of flattened elements"""
    
    def getFlattenedElemIdx(self, T: SVFType, origId: int) -> int: ...
    """Get the flattened element index"""

    def getFunObjVar(self, fun_name: str) -> FunObjVar: ...
    """Get the function object variable with the given name"""

    def getFunRet(self, fun: FunObjVar) -> SVFVar: ...
    """Get the function return value"""


# Add these definitions to pysvf.pyi

class SVFBasicBlock:
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    
    def getId(self) -> int: ...
    """Get the ID of the basic block"""
    
    def getName(self) -> str: ...
    """Get the name of the basic block"""
    
    def getICFGNodeList(self) -> List[ICFGNode]: ...
    """Get the list of ICFG nodes in the basic block"""
    
    def front(self) -> ICFGNode: ...
    """Get the first ICFG node in the basic block"""
    
    def back(self) -> ICFGNode: ...
    """Get the last ICFG node in the basic block"""
    
    def __iter__(self) -> Iterator[ICFGNode]: ...
    """Iterate through ICFG nodes in the basic block"""
    
    def getParent(self) -> SVFFunction: ...
    """Get the parent function of the basic block"""
    
    def getFunction(self) -> SVFFunction: ...
    """Get the function that contains this basic block"""
    
    def getSuccessors(self) -> List["SVFBasicBlock"]: ...
    """Get the successor basic blocks"""
    
    def getPredecessors(self) -> List["SVFBasicBlock"]: ...
    """Get the predecessor basic blocks"""
    
    def getNumSuccessors(self) -> int: ...
    """Get the number of successor basic blocks"""
    
    def getBBSuccessorPos(self, bb: "SVFBasicBlock") -> int: ...
    """Get the position of a successor basic block"""
    
    def getBBPredecessorPos(self, bb: "SVFBasicBlock") -> int: ...
    """Get the position of a predecessor basic block"""
    
    def __repr__(self) -> str: ...
    """Get the string representation of the basic block"""
    
    def __str__(self) -> str: ...
    """Get the string representation of the basic block"""


# Classes inheriting from ValVar
class DummyValVar(ValVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    


class ConstAggValVar(ValVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    

class BlackHoleValVar(ValVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    

# Classes inheriting from ObjVar/BaseObjVar
class DummyObjVar(BaseObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    

class GlobalObjVar(BaseObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    

class ConstAggObjVar(BaseObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    

class ConstNullPtrObjVar(ConstDataObjVar):
    def __init__(self, *args, **kwargs) -> None: ...
    """Not intended for direct instantiation."""
    



# Updated function signatures
# __init__.py
# arg is str or list[str]
def buildSVFModule(options: Union[str, List[str]]) -> None: ...
"""Pass Arguments to SVF Module"""

def getPAG() -> SVFIR: ...
"""Analyze LLVM bitcode and return SVFIR."""

# New access functions
def getICFG() -> ICFG: ...
"""Get the current interprocedural control flow graph"""

def getCallGraph() -> CallGraph: ...
"""Get the current call graph"""

def getCallGraphSCC() -> CallGraphSCC: ...
"""Get the current call graph SCC"""

def getSVFG() -> "SVFG": ...
"""Get the current sparse value flow graph if it was built"""

def getModuleName() -> str: ...
"""Get the name of the last analyzed module"""

def releasePAG(pag: SVFIR) -> None: ...
"""Release the SVFIR"""

# Value-flow graph base classes
class VFGEdge:
    """Base class for Value-Flow Graph edges"""
    def toString(self) -> str: ...
    def __str__(self) -> str: ...
    def isDirectVFGEdge(self) -> bool: ...
    def isIndirectVFGEdge(self) -> bool: ...
    def isCallVFGEdge(self) -> bool: ...
    def isRetVFGEdge(self) -> bool: ...
    def isCallDirectVFGEdge(self) -> bool: ...
    def isRetDirectVFGEdge(self) -> bool: ...
    def isCallIndirectVFGEdge(self) -> bool: ...
    def isRetIndirectVFGEdge(self) -> bool: ...
    def isIntraVFGEdge(self) -> bool: ...
    def isThreadMHPIndirectVFGEdge(self) -> bool: ...
    def getSrcNode(self) -> "VFGNode": ...
    def getDstNode(self) -> "VFGNode": ...
    def asDirectSVFGEdge(self) -> "DirectSVFGEdge": ...
    def asIndirectSVFGEdge(self) -> "IndirectSVFGEdge": ...
    def asCallDirSVFGEdge(self) -> "CallDirSVFGEdge": ...
    def asRetDirSVFGEdge(self) -> "RetDirSVFGEdge": ...
    def asCallIndSVFGEdge(self) -> "CallIndSVFGEdge": ...
    def asRetIndSVFGEdge(self) -> "RetIndSVFGEdge": ...

    def asThreadMHPIndSVFGEdge(self) -> "ThreadMHPIndSVFGEdge": ...

class DirectSVFGEdge(VFGEdge):
    """Direct SVF Graph Edge"""
    def toString(self) -> str: ...
    def asIntraDirSVFGEdge(self) -> "IntraDirSVFGEdge": ...
    def asCallDirSVFGEdge(self) -> "CallDirSVFGEdge": ...
    def asRetDirSVFGEdge(self) -> "RetDirSVFGEdge": ...

class IntraDirSVFGEdge(DirectSVFGEdge):
    """Intraprocedural direct SVF edge"""
    ...

class CallDirSVFGEdge(DirectSVFGEdge):
    """Call direct SVF edge"""
    def getCallSiteId(self) -> int: ...

class RetDirSVFGEdge(DirectSVFGEdge):
    """Return direct SVF edge"""
    def getCallSiteId(self) -> int: ...

class IndirectSVFGEdge(VFGEdge):
    """Indirect SVF Graph Edge"""
    def getPointsTo(self) -> Any: ...  # Could be more specific with proper type
    def addPointsTo(self, points: Any) -> None: ...
    def toString(self) -> str: ...
    def asIntraIndSVFGEdge(self) -> "IntraIndSVFGEdge": ...
    def asCallIndSVFGEdge(self) -> "CallIndSVFGEdge": ...
    def asRetIndSVFGEdge(self) -> "RetIndSVFGEdge": ...
    def asThreadMhpIndSVFGEdge(self) -> "ThreadMHPIndSVFGEdge": ...

class IntraIndSVFGEdge(IndirectSVFGEdge):
    """Intraprocedural indirect SVF edge"""
    ...

class CallIndSVFGEdge(IndirectSVFGEdge):
    """Call indirect SVF edge"""
    def getCallSiteId(self) -> int: ...

class RetIndSVFGEdge(IndirectSVFGEdge):
    """Return indirect SVF edge"""
    def getCallSiteId(self) -> int: ...

class ThreadMHPIndSVFGEdge(IndirectSVFGEdge):
    """Thread MHP indirect SVF edge"""
    ...

# VFG Node classes
class VFGNode:
    """Base class for Value-Flow Graph nodes"""
    def toString(self) -> str: ...
    def __str__(self) -> str: ...
    def getId(self) -> int: ...
    def getICFGNode(self) -> ICFGNode: ...
    def getDefSVFVars(self) -> List[SVFVar]: ...
    def getOutEdges(self) -> List[VFGEdge]: ...
    def getInEdges(self) -> List[VFGEdge]: ...
    def isStmtVFGNode(self) -> bool: ...
    def isPhiVFGNode(self) -> bool: ...
    def isArgumentVFGNode(self) -> bool: ...
    def isCmpVFGNode(self) -> bool: ...
    def isBinaryOpVFGNode(self) -> bool: ...
    def isUnaryOpVFGNode(self) -> bool: ...
    def isBranchVFGNode(self) -> bool: ...
    def asStmtVFGNode(self) -> "StmtVFGNode": ...
    def asPhiVFGNode(self) -> "PHIVFGNode": ...
    def asArgumentVFGNode(self) -> "ArgumentVFGNode": ...
    def asCmpVFGNode(self) -> "CmpVFGNode": ...
    def asBinaryOpVFGNode(self) -> "BinaryOPVFGNode": ...
    def asUnaryOpVFGNode(self) -> "UnaryOPVFGNode": ...
    def asBranchVFGNode(self) -> "BranchVFGNode": ...
    def getValue(self) -> SVFVar: ...

class StmtVFGNode(VFGNode):
    """Statement VFG node"""
    def getValue(self) -> SVFVar: ...
    def toString(self) -> str: ...
    def isLoadVFGNode(self) -> bool: ...
    def isStoreVFGNode(self) -> bool: ... 
    def isCopyVFGNode(self) -> bool: ...
    def isGepVFGNode(self) -> bool: ...
    def isAddrVFGNode(self) -> bool: ...
    def asLoadVFGNode(self) -> "LoadVFGNode": ...
    def asStoreVFGNode(self) -> "StoreVFGNode": ...
    def asCopyVFGNode(self) -> "CopyVFGNode": ...
    def asGepVFGNode(self) -> "GepVFGNode": ...
    def asAddrVFGNode(self) -> "AddrVFGNode": ...

class LoadVFGNode(StmtVFGNode):
    """Load VFG node"""
    def getDefSVFVars(self) -> List[SVFVar]: ...

class StoreVFGNode(StmtVFGNode):
    """Store VFG node"""
    def getDefSVFVars(self) -> List[SVFVar]: ...

class CopyVFGNode(StmtVFGNode):
    """Copy VFG node"""
    def getDefSVFVars(self) -> List[SVFVar]: ...

class GepVFGNode(StmtVFGNode):
    """Gep VFG node"""
    def getDefSVFVars(self) -> List[SVFVar]: ...

class AddrVFGNode(StmtVFGNode):
    """Address VFG node"""
    def getDefSVFVars(self) -> List[SVFVar]: ...

class PHIVFGNode(VFGNode):
    """PHI VFG node"""
    def getDefSVFVars(self) -> List[SVFVar]: ...
    def getValue(self) -> SVFVar: ...
    def isIntraPhiVFGNode(self) -> bool: ...
    def isInterPhiVFGNode(self) -> bool: ...
    def asIntraPhiVFGNode(self) -> "IntraPHIVFGNode": ...
    def asInterPhiVFGNode(self) -> "InterPHIVFGNode": ...

class IntraPHIVFGNode(PHIVFGNode):
    """Intra-procedural PHI VFG node"""
    ...

class InterPHIVFGNode(PHIVFGNode):
    """Inter-procedural PHI VFG node"""
    ...

class ArgumentVFGNode(VFGNode):
    """Argument VFG node"""
    def getValue(self) -> SVFVar: ...
    def isActualParmVFGNode(self) -> bool: ...
    def isFormalParmVFGNode(self) -> bool: ...
    def isActualRetVFGNode(self) -> bool: ...
    def isFormalRetVFGNode(self) -> bool: ...
    def asActualParmVFGNode(self) -> "ActualParmVFGNode": ...
    def asFormalParmVFGNode(self) -> "FormalParmVFGNode": ...
    def asActualRetVFGNode(self) -> "ActualRetVFGNode": ...
    def asFormalRetVFGNode(self) -> "FormalRetVFGNode": ...

class ActualParmVFGNode(ArgumentVFGNode):
    """Actual parameter VFG node"""
    def getDefSVFVars(self) -> List[SVFVar]: ...

class FormalParmVFGNode(ArgumentVFGNode):
    """Formal parameter VFG node"""
    def getDefSVFVars(self) -> List[SVFVar]: ...

class ActualRetVFGNode(ArgumentVFGNode):
    """Actual return VFG node"""
    def getDefSVFVars(self) -> List[SVFVar]: ...

class FormalRetVFGNode(ArgumentVFGNode):
    """Formal return VFG node"""
    def getDefSVFVars(self) -> List[SVFVar]: ...

class CmpVFGNode(VFGNode):
    """Compare VFG node"""
    def getDefSVFVars(self) -> List[SVFVar]: ...
    def getValue(self) -> SVFVar: ...

class BinaryOPVFGNode(VFGNode):
    """Binary operation VFG node"""
    def getDefSVFVars(self) -> List[SVFVar]: ...
    def getValue(self) -> SVFVar: ...

class UnaryOPVFGNode(VFGNode):
    """Unary operation VFG node"""
    def getDefSVFVars(self) -> List[SVFVar]: ...

class BranchVFGNode(VFGNode):
    """Branch VFG node"""
    def getDefSVFVars(self) -> List[SVFVar]: ...

# SVFG Node classes
class MRSVFGNode(VFGNode):
    """Memory region VFG node"""
    def getPointsTo(self) -> Any: ...  # Could be more specific with proper type
    def getDefSVFVars(self) -> List[SVFVar]: ...
    def toString(self) -> str: ...
    def isFormalInSVFGNode(self) -> bool: ...
    def isFormalOutSVFGNode(self) -> bool: ...
    def isActualInSVFGNode(self) -> bool: ...
    def isActualOutSVFGNode(self) -> bool: ...
    def isMssaPhiSVFGNode(self) -> bool: ...
    def asFormalInSVFGNode(self) -> "FormalINSVFGNode": ...
    def asFormalOutSVFGNode(self) -> "FormalOUTSVFGNode": ...
    def asActualInSVFGNode(self) -> "ActualINSVFGNode": ...
    def asActualOutSVFGNode(self) -> "ActualOUTSVFGNode": ...
    def asMssaPhiSVFGNode(self) -> "MSSAPHISVFGNode": ...

class FormalINSVFGNode(MRSVFGNode):
    """Formal-in SVFG node (entry chi)"""
    def getMRVer(self) -> Any: ...  # Could be more specific if we know the type
    def getFunEntryNode(self) -> FunEntryICFGNode: ...

class FormalOUTSVFGNode(MRSVFGNode):
    """Formal-out SVFG node (return mu)"""
    def getMRVer(self) -> Any: ...
    def getFunExitNode(self) -> FunExitICFGNode: ...

class ActualINSVFGNode(MRSVFGNode):
    def getMRVer(self) -> Any: ...
    def getCallSite(self) -> CallICFGNode: ...

class ActualOUTSVFGNode(MRSVFGNode):
    """Actual-in SVFG node (callsite mu)"""
    def getMRVer(self) -> Any: ...
    def getCallSite(self) -> CallICFGNode: ...

class MSSAPHISVFGNode(MRSVFGNode):
    """Memory SSA PHI SVFG node"""
    def isIntraMssaPhiSVFGNode(self) -> bool: ...
    def isInterMssaPhiSVFGNode(self) -> bool: ...
    def asIntraMssaPhiSVFGNode(self) -> "IntraMSSAPHISVFGNode": ...
    def asInterMssaPhiSVFGNode(self) -> "InterMSSAPHISVFGNode": ...

class IntraMSSAPHISVFGNode(MSSAPHISVFGNode):
    """Intra-procedural Memory SSA PHI SVFG node"""
    ...

class InterMSSAPHISVFGNode(MSSAPHISVFGNode):
    """Inter-procedural Memory SSA PHI SVFG node"""
    def getFun(self) -> SVFFunction: ...

class DummyVersionPropSVFGNode(VFGNode):
    """Dummy version propagation SVFG node"""
    def getDefSVFVars(self) -> List[SVFVar]: ...
    def getObject(self) -> int: ...
    def getVersion(self) -> int: ...

# Graph classes
class VFG:
    """Value Flow Graph"""
    def getNodes(self) -> List[VFGNode]: ...
    def getGNode(self, id: int) -> VFGNode: ...
    def dump(self) -> None: ...
    def view(self) -> None: ...
    def getTotalNodeNum(self) -> int: ...
    def getTotalEdgeNum(self) -> int: ...

class SVFG(VFG):
    """Sparse Value Flow Graph"""
    def hasDefSVFGNode(self, val: SVFVar) -> bool: ...
    def getDefSVFGNode(self, val: SVFVar) -> List[VFGNode]: ...
    def getActualOUTSVFGNodes(self, cs: CallICFGNode) -> List[ActualOUTSVFGNode]: ...
    def getActualINSVFGNodes(self, cs: CallICFGNode) -> List[ActualINSVFGNode]: ...
    def getFormalOUTSVFGNodes(self, fun: FunObjVar) -> List[FormalOUTSVFGNode]: ...
    def getFormalINSVFGNodes(self, fun: FunObjVar) -> List[FormalINSVFGNode]: ...
    def dump(self) -> None: ...
    def view(self) -> None: ...
    def hasActualOUTSVFGNodes(self, cs: CallICFGNode) -> bool: ...
    def hasActualINSVFGNodes(self, cs: CallICFGNode) -> bool: ...
    def hasFormalOUTSVFGNodes(self, fun: FunObjVar) -> bool: ...
    def hasFormalINSVFGNodes(self, fun: FunObjVar) -> bool: ...

class ConstraintEdge:
    """Constraint edge"""
    def getSrcNode(self) -> "ConstraintNode": ...
    def getDstNode(self) -> "ConstraintNode": ...
    def getSrcID(self) -> int: ...
    def getDstID(self) -> int: ...
    def isAddrCGEdge(self) -> bool: ...
    def isCopyCGEdge(self) -> bool: ...
    def isStoreCGEdge(self) -> bool: ...
    def isLoadCGEdge(self) -> bool: ...
    def isGepCGEdge(self) -> bool: ...
    def isNormalGepCGEdge(self) -> bool: ...
    def isVariantGepCGEdge(self) -> bool: ...
    def asAddrCGEdge(self) -> "AddrCGEdge": ...
    def asCopyCGEdge(self) -> "CopyCGEdge": ...
    def asStoreCGEdge(self) -> "StoreCGEdge": ...
    def asLoadCGEdge(self) -> "LoadCGEdge": ...
    def asGepCGEdge(self) -> "GepCGEdge": ...
    def asNormalGepCGEdge(self) -> "NormalGepCGEdge": ...
    def asVariantGepCGEdge(self) -> "VariantGepCGEdge": ...

class AddrCGEdge(ConstraintEdge):
    """Address constraint graph edge"""
    ...

class CopyCGEdge(ConstraintEdge):
    """Copy constraint graph edge"""
    ...

class StoreCGEdge(ConstraintEdge):
    """Store constraint graph edge"""
    ...

class LoadCGEdge(ConstraintEdge):
    """Load constraint graph edge"""
    ...

class GepCGEdge(ConstraintEdge):
    """GEP (GetElementPtr) constraint graph edge"""
    def asNormalGepCGEdge(self) -> "NormalGepCGEdge": ...
    def asVariantGepCGEdge(self) -> "VariantGepCGEdge": ...

class NormalGepCGEdge(GepCGEdge):
    """Normal GEP constraint graph edge with constant offset"""
    def getAccessPath(self) -> Any: ...  # 返回类型可能需要更具体
    def getConstantFieldIdx(self) -> int: ...

class VariantGepCGEdge(GepCGEdge):
    """Variant GEP constraint graph edge with variable offset"""
    ...


from typing import List, Set

class ConstraintNode:
    """Constraint node"""
    def toString(self) -> str: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def getId(self) -> int: ...
    def getInEdges(self) -> List["ConstraintEdge"]: ...
    def getOutEdges(self) -> List["ConstraintEdge"]: ...
    def getDirectInEdges(self) -> List["ConstraintEdge"]: ...
    def getDirectOutEdges(self) -> List["ConstraintEdge"]: ...
    def getCopyInEdges(self) -> List["CopyCGEdge"]: ...
    def getCopyOutEdges(self) -> List["CopyCGEdge"]: ...
    def getGepInEdges(self) -> List["GepCGEdge"]: ...
    def getGepOutEdges(self) -> List["GepCGEdge"]: ...
    def getLoadInEdges(self) -> List["LoadCGEdge"]: ...
    def getLoadOutEdges(self) -> List["LoadCGEdge"]: ...
    def getStoreInEdges(self) -> List["StoreCGEdge"]: ...
    def getStoreOutEdges(self) -> List["StoreCGEdge"]: ...
    def getAddrInEdges(self) -> List["AddrCGEdge"]: ...
    def getAddrOutEdges(self) -> List["AddrCGEdge"]: ...

class ConstraintGraph:
    """Constraint graph"""
    def getNodes(self) -> List[ConstraintNode]: ...
    def getGNode(self, id: int) -> ConstraintNode: ...
    def __iter__(self) -> Iterator[tuple[int, ConstraintNode]]: ...
    def dump(self, filename: str) -> None: ...
    def getConstraintNode(self, id: int) -> ConstraintNode: ...
    def addCopyCGEdge(self, src: int, dst: int) -> CopyCGEdge: ...
    def getGepObjVar(self, id: int, offset: Any) -> int: ...  

class BoundedInt:
    def __init__(self, val: int, isInf: bool = False) -> None: ...
    def getNumeral(self) -> int: ...
    @property
    def is_infinity(self) -> bool: ...
    @property
    def is_plus_infinity(self) -> bool: ...
    @property
    def is_minus_infinity(self) -> bool: ...
    @property
    def is_zero(self) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __add__(self, other: 'BoundedInt') -> 'BoundedInt': ...
    def __sub__(self, other: 'BoundedInt') -> 'BoundedInt': ...
    def __mul__(self, other: 'BoundedInt') -> 'BoundedInt': ...
    def __int__(self) -> int: ...
    def __truediv__(self, other: 'BoundedInt') -> 'BoundedInt': ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __lt__(self, other: 'BoundedInt') -> bool: ...
    def __le__(self, other: 'BoundedInt') -> bool: ...
    def __gt__(self, other: 'BoundedInt') -> bool: ...
    def __ge__(self, other: 'BoundedInt') -> bool: ...
    def __neg__(self) -> 'BoundedInt': ...
    @staticmethod
    def minus_infinity() -> int: ...
    @staticmethod
    def plus_infinity() -> int: ...


class IntervalValue:
    @overload
    def __init__(self, lb: int, ub: int) -> None: ...
    @overload
    def __init__(self, val: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __add__(self, other: 'IntervalValue') -> 'IntervalValue': ...
    def __sub__(self, other: 'IntervalValue') -> 'IntervalValue': ...
    def __mul__(self, other: 'IntervalValue') -> 'IntervalValue': ...
    def __truediv__(self, other: 'IntervalValue') -> 'IntervalValue': ...
    def __mod__(self, other: 'IntervalValue') -> 'IntervalValue': ...
    def __lt__(self, other: 'IntervalValue') -> bool: ...
    def __le__(self, other: 'IntervalValue') -> bool: ...
    def __gt__(self, other: 'IntervalValue') -> bool: ...
    def __ge__(self, other: 'IntervalValue') -> bool: ...
    def __and__(self, other: "IntervalValue") -> "IntervalValue": ...
    def __or__(self, other: "IntervalValue") -> "IntervalValue": ...
    def __xor__(self, other: "IntervalValue") -> "IntervalValue": ...
    def __lshift__(self, bits: int) -> "IntervalValue": ...
    def __rshift__(self, bits: int) -> "IntervalValue": ...
    def equals(self, other: "IntervalValue") -> "IntervalValue": ...
    def lb(self) -> int: ...
    def ub(self) -> int: ...
    def clone(self) -> 'IntervalValue': ...
    def join_with(self, other: 'IntervalValue') -> None: ...
    def meet_with(self, other: 'IntervalValue') -> None: ...
    def widen_with(self, other: 'IntervalValue') -> None: ...
    def narrow_with(self, other: 'IntervalValue') -> None: ...
    def isBottom(self) -> bool: ...
    def isTop(self) -> bool: ...
    def is_numeral(self) -> bool: ...
    def is_zero(self) -> bool: ...
    def is_real(self) -> bool: ...
    def is_int(self) -> bool: ...
    def getNumeral(self) -> float: ...
    def getIntNumeral(self) -> int: ...
    def getRealNumeral(self) -> float: ...
    def containedWithin(self, other: 'IntervalValue') -> bool: ...
    def contain(self, other: 'IntervalValue') -> bool: ...
    def leq(self, other: 'IntervalValue') -> bool: ...
    def geq(self, other: 'IntervalValue') -> bool: ...
    def set_to_bottom(self) -> None: ...
    def set_to_top(self) -> None: ...
    def toString(self) -> str: ...
    def eq_interval(self, other: 'IntervalValue') -> 'IntervalValue': ...
    def ne_interval(self, other: 'IntervalValue') -> 'IntervalValue': ...
    @staticmethod
    def top() -> 'IntervalValue': ...
    @staticmethod
    def bottom() -> 'IntervalValue': ...
    def __repr__(self) -> str: ...


class AddressValue:
    @overload
    def __init__(self, val: int) -> None: ...
    @overload
    def __init__(self, vals: Set[int]) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def insert(self, addr: int) -> bool: ...
    def contains(self, addr: int) -> bool: ...
    def empty(self) -> bool: ...
    def size(self) -> int: ...
    def clone(self) -> 'AddressValue': ...
    def isBottom(self) -> bool: ...
    def join_with(self, other: 'AddressValue') -> bool: ...
    def meet_with(self, other: 'AddressValue') -> bool: ...
    def hasIntersect(self, other: 'AddressValue') -> bool: ...
    def getVals(self) -> Set[int]: ...
    def setVals(self, vals: Set[int]) -> None: ...
    def __contains__(self, addr: int) -> bool: ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def __repr__(self) -> str: ...
    @staticmethod
    def getVirtualMemAddress(idx: int) -> int: ...
    @staticmethod
    def isVirtualMemAddress(val: int) -> bool: ...


class AbstractValue:
    @overload
    def __init__(self, val: int) -> None: ...
    @overload
    def __init__(self, vals: Set[int]) -> None: ...
    def isInterval(self) -> bool: ...
    def isAddr(self) -> bool: ...
    def clone(self) -> 'AbstractValue': ...
    def getInterval(self) -> IntervalValue: ...
    def getAddrs(self) -> AddressValue: ...
    def equals(self, other: 'AbstractValue') -> bool: ...
    def join_with(self, other: 'AbstractValue') -> None: ...
    def meet_with(self, other: 'AbstractValue') -> None: ...
    def widen_with(self, other: 'AbstractValue') -> None: ...
    def narrow_with(self, other: 'AbstractValue') -> None: ...
    # def refAddrs(self) -> list: ...
    # def refInterval(self) -> "IntervalValue": ...
    def __eq__(self, other: object) -> bool: ...
    def __str__(self) -> str: ...


class AbstractState:
    def __init__(self) -> None: ...
    def getVar(self, var_id: int) -> AbstractValue: ...
    def setVar(self, var_id: int, val: AbstractValue) -> None: ...
    def __getitem__(self, var_id: int) -> AbstractValue: ...
    def __setitem__(self, var_id: int, val: AbstractValue) -> None: ...
    def store(self, addr: int, val: AbstractValue) -> None: ...
    def load(self, addr: int) -> AbstractValue: ...
    def equals(self, other: 'AbstractState') -> bool: ...
    def joinWith(self, other: 'AbstractState') -> None: ...
    def meetWith(self, other: 'AbstractState') -> None: ...
    def widening(self, other: 'AbstractState') -> 'AbstractState': ...
    def narrowing(self, other: 'AbstractState') -> 'AbstractState': ...
    def bottom(self) -> None: ...
    def getIDFromAddr(self, addr: int) -> int: ...
    def top(self) -> None: ...
    def getElementIndex(self, gep: 'GepStmt') -> IntervalValue: ...
    def getByteOffset(self, gep: 'GepStmt') -> IntervalValue: ...
    def getPointeeElement(self, var_id: int) -> SVFType: ...
    def isVirtualMemAddress(self, val: int) -> bool: ...
    def getVirtualMemAddress(self, idx: int) -> int: ...
    def isCmpBranchFeasible(self, cmp: 'CmpStmt', succ: int, abstract_state: AbstractState) -> bool: ...
    def isSwitchBranchFeasible(self, switch_var: SVFVar, succ: int, abstract_state: AbstractState) -> bool: ...
    def storeValue(self, varId: int, val: AbstractValue) -> None: ...
    def loadValue(self, varId: int) -> AbstractValue: ...

    def inVarToValTable(self, var_id: int) -> bool: ...
    def inVarToAddrsTable(self, var_id: int) -> bool: ...
    def getGepObjAddrs(self, var_id: int, offset: IntervalValue) -> AddressValue: ...

    def clear(self) -> None: ...
    def clone(self) -> 'AbstractState': ...
    def getLocToVal(self) -> dict: ...
    def getVarToVal(self) -> dict: ...
    def printAbstractState(self) -> None: ...
    def __str__(self) -> str: ...

    @staticmethod
    def isNullMem(self, addr: int) -> bool: ...
    @staticmethod
    def isInvalidMem(self, addr: int) -> bool: ...


class PointsTo(Set[int]): 
    def set(self, value: int) -> None: ...

class AndersenBase:
    def __init__(self, svfir: 'SVFIR') -> None: ...
    def initialize(self) -> None: ...
    def initWorklist(self) -> None: ...
    def updateCallGraph(self) -> Any: ...
    def pushIntoWorklist(self, node: int) -> None: ...
    def finalize(self) -> None: ...
    def addPts(self, id: int, ptd: int) -> bool: ...
    def getConstraintGraph(self) -> 'ConstraintGraph': ...
    def unionPts(self, id: int, ptd: int) -> bool: ...
    def unionPts2(self, id: int, ptd: 'PointsTo') -> bool: ...
    def dumpPts(self, id: int, pts: 'PointsTo') -> None: ...
    def alias(self, id1: int, id2: int) -> Any: ...
    def isWorklistEmpty(self) -> bool: ...
    def popFromWorklist(self) -> int: ...
    def getPts(self, id: int) -> 'PointsTo': ...